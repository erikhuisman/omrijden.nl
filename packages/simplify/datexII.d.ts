// Code generated by xgen. DO NOT EDIT.

// _AreaExtensionType ...
export class _AreaExtensionType {
    AreaExtended: AreaExtended
    OpenlrExtendedArea: OpenlrExtendedArea
}

// _ChargeBandVersionedReference ...
export class _ChargeBandVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _ContactDetailsVersionedReference ...
export class _ContactDetailsVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _ExtensionType ...
export class _ExtensionType {}

// _GenericPublicationExtensionType ...
export class _GenericPublicationExtensionType {
    ParkingTablePublication: ParkingTablePublication
    ParkingVehiclesPublication: ParkingVehiclesPublication
    ParkingStatusPublication: ParkingStatusPublication
}

// _GroupOfParkingSpaces ...
export class _GroupOfParkingSpaces {
    GroupIndexAttr: number
    ParkingSpaceBasics: ParkingSpaceBasics
}

// _GroupOfParkingSpacesParkingSpaceIndexParkingSpace ...
export class _GroupOfParkingSpacesParkingSpaceIndexParkingSpace {
    ParkingSpaceIndexAttr: number
    ParkingSpace: ParkingSpace
}

// _IntermediatePointOnLinearElement ...
export class _IntermediatePointOnLinearElement {
    IndexAttr: number
    Referent: Referent
}

// _LinearExtensionType ...
export class _LinearExtensionType {
    OpenlrExtendedLinear: OpenlrExtendedLinear
}

// _LocationContainedInItinerary ...
export class _LocationContainedInItinerary {
    IndexAttr: number
    Location: Location
}

// _MeasurementSiteRecordIndexMeasurementSpecificCharacteristics ...
export class _MeasurementSiteRecordIndexMeasurementSpecificCharacteristics {
    IndexAttr: number
    MeasurementSpecificCharacteristics: MeasurementSpecificCharacteristics
}

// _MeasurementSiteRecordVersionedReference ...
export class _MeasurementSiteRecordVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _MeasurementSiteTableVersionedReference ...
export class _MeasurementSiteTableVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _ParkingAccessReference ...
export class _ParkingAccessReference extends Reference {
    TargetClassAttr: any
}

// _ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility ...
export class _ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility {
    EquipmentOrServiceFacilityIndexAttr: number
    ParkingEquipmentOrServiceFacility: ParkingEquipmentOrServiceFacility
}

// _ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus ...
export class _ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus {
    EquipmentOrServiceFacilityIndexAttr: number
    ParkingEquipmentOrServiceFacilityStatus: ParkingEquipmentOrServiceFacilityStatus
}

// _ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus ...
export class _ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus {
    GroupIndexAttr: number
    GroupOfParkingSpacesStatus: GroupOfParkingSpacesStatus
}

// _ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus ...
export class _ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus {
    ParkingSpaceIndexAttr: number
    ParkingSpaceStatus: ParkingSpaceStatus
}

// _ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus ...
export class _ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus {
    ScenarioIndexAttr: number
    ParkingUsageScenarioStatus: ParkingUsageScenarioStatus
}

// _ParkingRecordVersionedReference ...
export class _ParkingRecordVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _ParkingRouteDetailsVersionedReference ...
export class _ParkingRouteDetailsVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _ParkingSiteScenarioIndexParkingUsageScenario ...
export class _ParkingSiteScenarioIndexParkingUsageScenario {
    ScenarioIndexAttr: number
    ParkingUsageScenario: ParkingUsageScenario
}

// _ParkingSpace ...
export class _ParkingSpace {
    ParkingSpaceIndexAttr: number
    ParkingSpaceBasics: ParkingSpaceBasics
}

// _ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility ...
export class _ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility {
    EquipmentOrServiceFacilityIndexAttr: number
    ParkingEquipmentOrServiceFacility: ParkingEquipmentOrServiceFacility
}

// _ParkingSpaceBasicsScenarioIndexParkingUsageScenario ...
export class _ParkingSpaceBasicsScenarioIndexParkingUsageScenario {
    ScenarioIndexAttr: number
    ParkingUsageScenario: ParkingUsageScenario
}

// _ParkingTableVersionedReference ...
export class _ParkingTableVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _PeriodExtensionType ...
export class _PeriodExtensionType {
    PeriodExtended: PeriodExtended
}

// _PointExtensionType ...
export class _PointExtensionType {
    PointExtended: PointExtended
    OpenlrExtendedPoint: OpenlrExtendedPoint
}

// _PolygonAreaIndexPointCoordinates ...
export class _PolygonAreaIndexPointCoordinates {
    IndexAttr: number
    PointCoordinates: PointCoordinates
}

// _PredefinedItineraryIndexPredefinedLocation ...
export class _PredefinedItineraryIndexPredefinedLocation {
    IndexAttr: number
    PredefinedLocation: PredefinedLocation
}

// _PredefinedItineraryVersionedReference ...
export class _PredefinedItineraryVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _PredefinedLocationVersionedReference ...
export class _PredefinedLocationVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _PredefinedNonOrderedLocationGroupVersionedReference ...
export class _PredefinedNonOrderedLocationGroupVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _SiteMeasurementsIndexMeasuredValue ...
export class _SiteMeasurementsIndexMeasuredValue {
    IndexAttr: number
    MeasuredValue: MeasuredValue
}

// _SituationRecordExtensionType ...
export class _SituationRecordExtensionType {
    SituationRecordExtendedApproved: SituationRecordExtendedApproved
}

// _SituationRecordVersionedReference ...
export class _SituationRecordVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _SituationVersionedReference ...
export class _SituationVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _TextPage ...
export class _TextPage {
    PageNumberAttr: number
    VmsText: VmsText
}

// _VehicleCharacteristicsExtensionType ...
export class _VehicleCharacteristicsExtensionType {
    VehicleCharacteristicsExtended: VehicleCharacteristicsExtended
}

// _VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics ...
export class _VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics {
    PictogramDisplayAreaIndexAttr: number
    VmsPictogramDisplayCharacteristics: VmsPictogramDisplayCharacteristics
}

// _VmsMessageIndexVmsMessage ...
export class _VmsMessageIndexVmsMessage {
    MessageIndexAttr: number
    VmsMessage: VmsMessage
}

// _VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea ...
export class _VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea {
    PictogramDisplayAreaIndexAttr: number
    VmsPictogramDisplayArea: VmsPictogramDisplayArea
}

// _VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings ...
export class _VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings {
    PictogramDisplayAreaIndexAttr: number
    PictogramDisplayAreaSettings: PictogramDisplayAreaSettings
}

// _VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram ...
export class _VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram {
    PictogramSequencingIndexAttr: number
    VmsPictogram: VmsPictogram
}

// _VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics ...
export class _VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics {
    PictogramDisplayAreaIndexAttr: number
    VmsPictogramDisplayCharacteristics: VmsPictogramDisplayCharacteristics
}

// _VmsTextLineIndexVmsTextLine ...
export class _VmsTextLineIndexVmsTextLine {
    LineIndexAttr: number
    VmsTextLine: VmsTextLine
}

// _VmsUnitRecordVersionedReference ...
export class _VmsUnitRecordVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _VmsUnitRecordVmsIndexVmsRecord ...
export class _VmsUnitRecordVmsIndexVmsRecord {
    VmsIndexAttr: number
    VmsRecord: VmsRecord
}

// _VmsUnitTableVersionedReference ...
export class _VmsUnitTableVersionedReference extends VersionedReference {
    TargetClassAttr: any
}

// _VmsUnitVmsIndexVms ...
export class _VmsUnitVmsIndexVms {
    VmsIndexAttr: number
    Vms: Vms
}

// AbnormalTraffic ...
export class AbnormalTraffic extends TrafficElement {
    AbnormalTrafficType: string
    NumberOfVehiclesWaiting: number
    QueueLength: NonNegativeInteger
    RelativeTrafficFlow: string
    TrafficFlowCharacteristics: string
    TrafficTrendType: string
    AbnormalTrafficExtension: _ExtensionType
}

// AbnormalTrafficTypeEnum ...
export enum AbnormalTrafficTypeEnum {
    stationaryTraffic = 'stationaryTraffic',
    queuingTraffic = 'queuingTraffic',
    slowTraffic = 'slowTraffic',
    heavyTraffic = 'heavyTraffic',
    unspecifiedAbnormalTraffic = 'unspecifiedAbnormalTraffic',
    other = 'other',
}

// AcceptedPaymentCards ...
export class AcceptedPaymentCards {
    PaymentCards: string
    OtherPaymentCards: string
    PaymentCardBrands: string
    OtherPaymentCardBrands: string
    AcceptedPaymentCardsExtension: _ExtensionType
}

// AccessCategoryEnum ...
export enum AccessCategoryEnum {
    vehicleEntranceAndExit = 'vehicleEntranceAndExit',
    vehicleEntrance = 'vehicleEntrance',
    vehicleExit = 'vehicleExit',
    pedestrianEntranceAndExit = 'pedestrianEntranceAndExit',
    pedestrianEntrance = 'pedestrianEntrance',
    pedestrianExit = 'pedestrianExit',
    rentalCarReturn = 'rentalCarReturn',
    bicycles = 'bicycles',
    emergencyExit = 'emergencyExit',
    unspecified = 'unspecified',
    unknown = 'unknown',
    other = 'other',
}

// AccessEquipmentEnum ...
export enum AccessEquipmentEnum {
    barrier = 'barrier',
    trafficSignal = 'trafficSignal',
    ticketButtonMachine = 'ticketButtonMachine',
    ticketCardMachine = 'ticketCardMachine',
    payAndExitMachine = 'payAndExitMachine',
    other = 'other',
}

// AccessibilityEnum ...
export enum AccessibilityEnum {
    barrierFreeAccessible = 'barrierFreeAccessible',
    handicappedAccessible = 'handicappedAccessible',
    wheelChairAccessible = 'wheelChairAccessible',
    handicappedEasements = 'handicappedEasements',
    orientationSystemForBlindPeople = 'orientationSystemForBlindPeople',
    handicappedMarked = 'handicappedMarked',
    none = 'none',
    unknown = 'unknown',
    other = 'other',
}

// Accident ...
export class Accident extends TrafficElement {
    AccidentCause: string
    AccidentType: string
    TotalNumberOfPeopleInvolved: number
    TotalNumberOfVehiclesInvolved: number
    VehicleInvolved: Array<Vehicle>
    GroupOfVehiclesInvolved: Array<GroupOfVehiclesInvolved>
    GroupOfPeopleInvolved: Array<GroupOfPeopleInvolved>
    AccidentExtension: _ExtensionType
}

// AccidentCauseEnum ...
export enum AccidentCauseEnum {
    avoidanceOfObstacles = 'avoidanceOfObstacles',
    driverDistraction = 'driverDistraction',
    driverDrugAbuse = 'driverDrugAbuse',
    driverIllness = 'driverIllness',
    exceedingSpeedsLimits = 'exceedingSpeedsLimits',
    excessAlcohol = 'excessAlcohol',
    excessiveDriverTiredness = 'excessiveDriverTiredness',
    impermissibleManoeuvre = 'impermissibleManoeuvre',
    limitedVisibility = 'limitedVisibility',
    notKeepingASafeDistance = 'notKeepingASafeDistance',
    onTheWrongSideOfTheRoad = 'onTheWrongSideOfTheRoad',
    pedestrianInRoad = 'pedestrianInRoad',
    poorLaneAdherence = 'poorLaneAdherence',
    poorMergeEntryOrExitJudgement = 'poorMergeEntryOrExitJudgement',
    poorRoadSurfaceCondition = 'poorRoadSurfaceCondition',
    poorSurfaceAdherence = 'poorSurfaceAdherence',
    undisclosed = 'undisclosed',
    unknown = 'unknown',
    vehicleFailure = 'vehicleFailure',
    other = 'other',
}

// AccidentTypeEnum ...
export enum AccidentTypeEnum {
    accident = 'accident',
    accidentInvolvingBicycles = 'accidentInvolvingBicycles',
    accidentInvolvingBuses = 'accidentInvolvingBuses',
    accidentInvolvingHazardousMaterials = 'accidentInvolvingHazardousMaterials',
    accidentInvolvingHeavyLorries = 'accidentInvolvingHeavyLorries',
    accidentInvolvingMassTransitVehicle = 'accidentInvolvingMassTransitVehicle',
    accidentInvolvingMopeds = 'accidentInvolvingMopeds',
    accidentInvolvingMotorcycles = 'accidentInvolvingMotorcycles',
    accidentInvolvingRadioactiveMaterial = 'accidentInvolvingRadioactiveMaterial',
    accidentInvolvingTrain = 'accidentInvolvingTrain',
    chemicalSpillageAccident = 'chemicalSpillageAccident',
    collision = 'collision',
    collisionWithAnimal = 'collisionWithAnimal',
    collisionWithObstruction = 'collisionWithObstruction',
    collisionWithPerson = 'collisionWithPerson',
    earlierAccident = 'earlierAccident',
    fuelSpillageAccident = 'fuelSpillageAccident',
    headOnCollision = 'headOnCollision',
    headOnOrSideCollision = 'headOnOrSideCollision',
    jackknifedArticulatedLorry = 'jackknifedArticulatedLorry',
    jackknifedCaravan = 'jackknifedCaravan',
    jackknifedTrailer = 'jackknifedTrailer',
    multipleVehicleCollision = 'multipleVehicleCollision',
    multivehicleAccident = 'multivehicleAccident',
    oilSpillageAccident = 'oilSpillageAccident',
    overturnedHeavyLorry = 'overturnedHeavyLorry',
    overturnedTrailer = 'overturnedTrailer',
    overturnedVehicle = 'overturnedVehicle',
    rearCollision = 'rearCollision',
    secondaryAccident = 'secondaryAccident',
    seriousAccident = 'seriousAccident',
    sideCollision = 'sideCollision',
    vehicleOffRoad = 'vehicleOffRoad',
    vehicleSpunAround = 'vehicleSpunAround',
    other = 'other',
}

// Activity ...
export class Activity extends TrafficElement {
    MobilityOfActivity: Mobility
    ActivityExtension: _ExtensionType
}

// AffectedCarriagewayAndLanes ...
export class AffectedCarriagewayAndLanes {
    Carriageway: string
    Lane: string
    Footpath: boolean
    LengthAffected: number
    AffectedCarriagewayAndLanesExtension: _ExtensionType
}

// AlertCArea ...
export class AlertCArea {
    AlertCLocationCountryCode: string
    AlertCLocationTableNumber: string
    AlertCLocationTableVersion: string
    AreaLocation: AlertCLocation
    AlertCAreaExtension: _ExtensionType
}

// AlertCDirection ...
export class AlertCDirection {
    AlertCDirectionCoded: string
    AlertCDirectionNamed: MultilingualString
    AlertCDirectionSense: boolean
    AlertCDirectionExtension: _ExtensionType
}

// AlertCDirectionEnum ...
export enum AlertCDirectionEnum {
    both = 'both',
    negative = 'negative',
    positive = 'positive',
    unknown = 'unknown',
}

// AlertCLinear ...
export class AlertCLinear {
    AlertCLocationCountryCode: string
    AlertCLocationTableNumber: string
    AlertCLocationTableVersion: string
    AlertCLinearExtension: _ExtensionType
}

// AlertCLinearByCode ...
export class AlertCLinearByCode extends AlertCLinear {
    AlertCDirection: AlertCDirection
    LocationCodeForLinearLocation: AlertCLocation
    AlertCLinearByCodeExtension: _ExtensionType
}

// AlertCLocation ...
export class AlertCLocation {
    AlertCLocationName: MultilingualString
    SpecificLocation: NonNegativeInteger
    AlertCLocationExtension: _ExtensionType
}

// AlertCLocationCode ...
export type AlertCLocationCode = number

// AlertCMethod2Linear ...
export class AlertCMethod2Linear extends AlertCLinear {
    AlertCDirection: AlertCDirection
    AlertCMethod2PrimaryPointLocation: AlertCMethod2PrimaryPointLocation
    AlertCMethod2SecondaryPointLocation: AlertCMethod2SecondaryPointLocation
    AlertCMethod2LinearExtension: _ExtensionType
}

// AlertCMethod2Point ...
export class AlertCMethod2Point extends AlertCPoint {
    AlertCDirection: AlertCDirection
    AlertCMethod2PrimaryPointLocation: AlertCMethod2PrimaryPointLocation
    AlertCMethod2PointExtension: _ExtensionType
}

// AlertCMethod2PrimaryPointLocation ...
export class AlertCMethod2PrimaryPointLocation {
    AlertCLocation: AlertCLocation
    AlertCMethod2PrimaryPointLocationExtension: _ExtensionType
}

// AlertCMethod2SecondaryPointLocation ...
export class AlertCMethod2SecondaryPointLocation {
    AlertCLocation: AlertCLocation
    AlertCMethod2SecondaryPointLocationExtension: _ExtensionType
}

// AlertCMethod4Linear ...
export class AlertCMethod4Linear extends AlertCLinear {
    AlertCDirection: AlertCDirection
    AlertCMethod4PrimaryPointLocation: AlertCMethod4PrimaryPointLocation
    AlertCMethod4SecondaryPointLocation: AlertCMethod4SecondaryPointLocation
    AlertCMethod4LinearExtension: _ExtensionType
}

// AlertCMethod4Point ...
export class AlertCMethod4Point extends AlertCPoint {
    AlertCDirection: AlertCDirection
    AlertCMethod4PrimaryPointLocation: AlertCMethod4PrimaryPointLocation
    AlertCMethod4PointExtension: _ExtensionType
}

// AlertCMethod4PrimaryPointLocation ...
export class AlertCMethod4PrimaryPointLocation {
    AlertCLocation: AlertCLocation
    OffsetDistance: OffsetDistance
    AlertCMethod4PrimaryPointLocationExtension: _ExtensionType
}

// AlertCMethod4SecondaryPointLocation ...
export class AlertCMethod4SecondaryPointLocation {
    AlertCLocation: AlertCLocation
    OffsetDistance: OffsetDistance
    AlertCMethod4SecondaryPointLocationExtension: _ExtensionType
}

// AlertCPoint ...
export class AlertCPoint {
    AlertCLocationCountryCode: string
    AlertCLocationTableNumber: string
    AlertCLocationTableVersion: string
    AlertCPointExtension: _ExtensionType
}

// AmountOfMoney ...
export type AmountOfMoney = number

// Ampere ...
export type Ampere = number

// AngleInDegrees ...
export type AngleInDegrees = number

// AnimalPresenceObstruction ...
export class AnimalPresenceObstruction extends Obstruction {
    Alive: boolean
    AnimalPresenceType: string
    AnimalPresenceObstructionExtension: _ExtensionType
}

// AnimalPresenceTypeEnum ...
export enum AnimalPresenceTypeEnum {
    animalsOnTheRoad = 'animalsOnTheRoad',
    herdOfAnimalsOnTheRoad = 'herdOfAnimalsOnTheRoad',
    largeAnimalsOnTheRoad = 'largeAnimalsOnTheRoad',
}

// ApplicationRateValue ...
export class ApplicationRateValue extends DataValue {
    ApplicationRate: number
    ApplicationRateValueExtension: _ExtensionType
}

// Area ...
export class Area extends Location {
    AlertCArea: AlertCArea
    TpegAreaLocation: TpegAreaLocation
    AreaExtension: _AreaExtensionType
}

// AreaDestination ...
export class AreaDestination extends Destination {
    Area: Area
    AreaDestinationExtension: _ExtensionType
}

// AreaExtended ...
export class AreaExtended {
    NamedArea: NamedArea
    PolygonArea: Array<PolygonArea>
}

// AreaOfInterestEnum ...
export enum AreaOfInterestEnum {
    continentWide = 'continentWide',
    national = 'national',
    neighbouringCountries = 'neighbouringCountries',
    notSpecified = 'notSpecified',
    regional = 'regional',
}

// AuthorityOperation ...
export class AuthorityOperation extends Activity {
    AuthorityOperationType: string
    AuthorityOperationExtension: _ExtensionType
}

// AuthorityOperationTypeEnum ...
export enum AuthorityOperationTypeEnum {
    accidentInvestigationWork = 'accidentInvestigationWork',
    bombSquadInAction = 'bombSquadInAction',
    civilEmergency = 'civilEmergency',
    customsOperation = 'customsOperation',
    juridicalReconstruction = 'juridicalReconstruction',
    policeCheckPoint = 'policeCheckPoint',
    policeInvestigation = 'policeInvestigation',
    roadOperatorCheckPoint = 'roadOperatorCheckPoint',
    survey = 'survey',
    transportOfVip = 'transportOfVip',
    undefinedAuthorityActivity = 'undefinedAuthorityActivity',
    vehicleInspectionCheckPoint = 'vehicleInspectionCheckPoint',
    vehicleWeighing = 'vehicleWeighing',
    weighInMotion = 'weighInMotion',
    other = 'other',
}

// AvailabilityEnum ...
export enum AvailabilityEnum {
    available = 'available',
    notAvailable = 'notAvailable',
    unknown = 'unknown',
}

// AxleFlowValue ...
export class AxleFlowValue extends DataValue {
    AxleFlowRate: NonNegativeInteger
    AxleFlowValueExtension: _ExtensionType
}

// AxleSpacing ...
export class AxleSpacing {
    AxleSpacing: number
    AxleSpacingSequenceIdentifier: number
    AxleSpacingExtension: _ExtensionType
}

// AxlesPerHour ...
export type AxlesPerHour = number

// AxleWeight ...
export class AxleWeight {
    AxlePositionIdentifier: number
    AxleWeight: number
    MaximumPermittedAxleWeight: number
    AxleWeightExtension: _ExtensionType
}

// BasicData ...
export class BasicData {
    MeasurementOrCalculatedTimePrecisionAttr: string | null
    MeasurementOrCalculationPeriod: number
    MeasurementOrCalculationTime: string
    PertinentLocation: GroupOfLocations
    BasicDataExtension: _ExtensionType
}

// Boolean ...
export type Boolean = boolean

// CarParkConfigurationEnum ...
export enum CarParkConfigurationEnum {
    multiStorey = 'multiStorey',
    parkAndRide = 'parkAndRide',
    singleLevel = 'singleLevel',
    underground = 'underground',
}

// CarParks ...
export class CarParks extends NonRoadEventInformation {
    CarParkConfiguration: string
    CarParkIdentity: string
    CarParkOccupancy: number
    CarParkStatus: string
    ExitRate: number
    FillRate: number
    NumberOfVacantParkingSpaces: number
    OccupiedSpaces: number
    QueuingTime: number
    TotalCapacity: number
    CarParksExtension: _ExtensionType
}

// CarParkStatusEnum ...
export enum CarParkStatusEnum {
    carParkClosed = 'carParkClosed',
    allCarParksFull = 'allCarParksFull',
    carParkFacilityFaulty = 'carParkFacilityFaulty',
    carParkFull = 'carParkFull',
    carParkStatusUnknown = 'carParkStatusUnknown',
    enoughSpacesAvailable = 'enoughSpacesAvailable',
    multiStoryCarParksFull = 'multiStoryCarParksFull',
    noMoreParkingSpacesAvailable = 'noMoreParkingSpacesAvailable',
    noParkAndRideInformation = 'noParkAndRideInformation',
    noParkingAllowed = 'noParkingAllowed',
    noParkingInformationAvailable = 'noParkingInformationAvailable',
    normalParkingRestrictionsLifted = 'normalParkingRestrictionsLifted',
    onlyAFewSpacesAvailable = 'onlyAFewSpacesAvailable',
    parkAndRideServiceNotOperating = 'parkAndRideServiceNotOperating',
    parkAndRideServiceOperating = 'parkAndRideServiceOperating',
    specialParkingRestrictionsInForce = 'specialParkingRestrictionsInForce',
}

// CarriagewayEnum ...
export enum CarriagewayEnum {
    connectingCarriageway = 'connectingCarriageway',
    entrySlipRoad = 'entrySlipRoad',
    exitSlipRoad = 'exitSlipRoad',
    flyover = 'flyover',
    leftHandFeederRoad = 'leftHandFeederRoad',
    leftHandParallelCarriageway = 'leftHandParallelCarriageway',
    mainCarriageway = 'mainCarriageway',
    oppositeCarriageway = 'oppositeCarriageway',
    parallelCarriageway = 'parallelCarriageway',
    rightHandFeederRoad = 'rightHandFeederRoad',
    rightHandParallelCarriageway = 'rightHandParallelCarriageway',
    roundabout = 'roundabout',
    serviceRoad = 'serviceRoad',
    slipRoads = 'slipRoads',
    underpass = 'underpass',
}

// CatalogueReference ...
export class CatalogueReference {
    KeyCatalogueReference: string
    CatalogueReferenceExtension: _ExtensionType
}

// Cause ...
export class Cause {
    CauseExtension: _ExtensionType
}

// CauseTypeEnum ...
export enum CauseTypeEnum {
    accident = 'accident',
    congestion = 'congestion',
    earlierAccident = 'earlierAccident',
    earlierEvent = 'earlierEvent',
    earlierIncident = 'earlierIncident',
    equipmentFailure = 'equipmentFailure',
    excessiveHeat = 'excessiveHeat',
    frost = 'frost',
    holidayTraffic = 'holidayTraffic',
    infrastructureFailure = 'infrastructureFailure',
    largeNumbersOfVisitors = 'largeNumbersOfVisitors',
    obstruction = 'obstruction',
    pollutionAlert = 'pollutionAlert',
    poorWeather = 'poorWeather',
    problemsAtBorderPost = 'problemsAtBorderPost',
    problemsAtCustomPost = 'problemsAtCustomPost',
    problemsOnLocalRoads = 'problemsOnLocalRoads',
    radioactiveLeakAlert = 'radioactiveLeakAlert',
    roadsideEvent = 'roadsideEvent',
    rubberNecking = 'rubberNecking',
    securityIncident = 'securityIncident',
    shearWeightOfTraffic = 'shearWeightOfTraffic',
    technicalProblems = 'technicalProblems',
    terrorism = 'terrorism',
    toxicCloudAlert = 'toxicCloudAlert',
    vandalism = 'vandalism',
    other = 'other',
}

// ChangedFlagEnum ...
export enum ChangedFlagEnum {
    catalogue = 'catalogue',
    filter = 'filter',
}

// Charge ...
export class Charge {
    Charge: number
    ChargeInterval: number
    ChargeType: string
    ChargeTypeDescription: MultilingualString
    MaxIterationsOfCharge: number
    MinIterationsOfCharge: number
    ChargeOrderIndex: number
    TimePeriodOfDay: TimePeriodOfDay
    ChargeExtension: _ExtensionType
}

// ChargeBand ...
export class ChargeBand {
    IdAttr: string
    VersionAttr: string
    ChargeCurrency: string
    MaximumDuration: number
    ChargeBandName: MultilingualString
    ApplicableForUser: string
    Charge: Array<Charge>
    ApplicableForPeriod: OverallPeriod
    ApplicableForVehicles: Array<VehicleCharacteristics>
    ParkingPermit: Array<ParkingPermit>
    ChargeBandExtension: _ExtensionType
}

// ChargeBandByReference ...
export class ChargeBandByReference {
    ChargeBandReference: _ChargeBandVersionedReference
    ChargeBandByReferenceExtension: _ExtensionType
}

// ChargeTypeEnum ...
export enum ChargeTypeEnum {
    minimum = 'minimum',
    maximum = 'maximum',
    additionalIntervalPrice = 'additionalIntervalPrice',
    seasonTicket = 'seasonTicket',
    temporaryPrice = 'temporaryPrice',
    firstIntervalPrice = 'firstIntervalPrice',
    freeParking = 'freeParking',
    flat = 'flat',
    unknown = 'unknown',
    other = 'other',
}

// ChargingStationUsageTypeEnum ...
export enum ChargingStationUsageTypeEnum {
    electricVehicle = 'electricVehicle',
    motorhomeOrCaravanSupply = 'motorhomeOrCaravanSupply',
    electricBikeOrMotorcycle = 'electricBikeOrMotorcycle',
    lorryPowerConsumption = 'lorryPowerConsumption',
    electricalDevices = 'electricalDevices',
    other = 'other',
}

// CodedReasonForSettingMessageEnum ...
export enum CodedReasonForSettingMessageEnum {
    situation = 'situation',
    operatorCreated = 'operatorCreated',
    trafficManagement = 'trafficManagement',
    travelTime = 'travelTime',
    campaign = 'campaign',
    default = 'default',
}

// ColourEnum ...
export enum ColourEnum {
    amber = 'amber',
    blue = 'blue',
    green = 'green',
    red = 'red',
    white = 'white',
    whiteYellow = 'whiteYellow',
}

// Comment ...
export class Comment {
    Comment: MultilingualString
    CommentDateTime: string
    CommentType: string
    CommentExtension: _ExtensionType
}

// CommentTypeEnum ...
export enum CommentTypeEnum {
    abnormalLoadMovementNote = 'abnormalLoadMovementNote',
    dataProcessingNote = 'dataProcessingNote',
    description = 'description',
    internalNote = 'internalNote',
    locationDescriptor = 'locationDescriptor',
    warning = 'warning',
    other = 'other',
}

// ComparisonOperatorEnum ...
export enum ComparisonOperatorEnum {
    equalTo = 'equalTo',
    greaterThan = 'greaterThan',
    greaterThanOrEqualTo = 'greaterThanOrEqualTo',
    lessThan = 'lessThan',
    lessThanOrEqualTo = 'lessThanOrEqualTo',
}

// ComplianceOptionEnum ...
export enum ComplianceOptionEnum {
    advisory = 'advisory',
    mandatory = 'mandatory',
}

// ComputationMethodEnum ...
export enum ComputationMethodEnum {
    arithmeticAverageOfSamplesBasedOnAFixedNumberOfSamples = 'arithmeticAverageOfSamplesBasedOnAFixedNumberOfSamples',
    arithmeticAverageOfSamplesInATimePeriod = 'arithmeticAverageOfSamplesInATimePeriod',
    harmonicAverageOfSamplesInATimePeriod = 'harmonicAverageOfSamplesInATimePeriod',
    medianOfSamplesInATimePeriod = 'medianOfSamplesInATimePeriod',
    movingAverageOfSamples = 'movingAverageOfSamples',
}

// ConcentrationKilogramsPerCubicMetre ...
export type ConcentrationKilogramsPerCubicMetre = number

// ConcentrationMicrogramsPerCubicMetre ...
export type ConcentrationMicrogramsPerCubicMetre = number

// ConcentrationOfVehiclesValue ...
export class ConcentrationOfVehiclesValue extends DataValue {
    ConcentrationOfVehicles: NonNegativeInteger
    ConcentrationOfVehiclesValueExtension: _ExtensionType
}

// ConcentrationVehiclesPerKilometre ...
export type ConcentrationVehiclesPerKilometre = number

// Conditions ...
export class Conditions extends TrafficElement {
    DrivingConditionType: string
    ConditionsExtension: _ExtensionType
}

// ConfidentialityValueEnum ...
export enum ConfidentialityValueEnum {
    internalUse = 'internalUse',
    noRestriction = 'noRestriction',
    restrictedToAuthorities = 'restrictedToAuthorities',
    restrictedToAuthoritiesAndTrafficOperators = 'restrictedToAuthoritiesAndTrafficOperators',
    restrictedToAuthoritiesTrafficOperatorsAndPublishers = 'restrictedToAuthoritiesTrafficOperatorsAndPublishers',
    restrictedToAuthoritiesTrafficOperatorsAndVms = 'restrictedToAuthoritiesTrafficOperatorsAndVms',
}

// ConstructionWorks ...
export class ConstructionWorks extends Roadworks {
    ConstructionWorkType: string
    ConstructionWorksExtension: _ExtensionType
}

// ConstructionWorkTypeEnum ...
export enum ConstructionWorkTypeEnum {
    blastingWork = 'blastingWork',
    constructionWork = 'constructionWork',
    demolitionWork = 'demolitionWork',
    roadImprovementOrUpgrading = 'roadImprovementOrUpgrading',
    roadWideningWork = 'roadWideningWork',
}

// Contact ...
export class Contact {
    ContactUnknown: boolean
    ContactNotDefined: boolean
    ValidityOfContact: OverallPeriod
    ContactExtension: _ExtensionType
}

// ContactByReference ...
export class ContactByReference extends Contact {
    ContactReference: _ContactDetailsVersionedReference
    ContactByReferenceExtension: _ExtensionType
}

// ContactDetails ...
export class ContactDetails extends Contact {
    IdAttr: string
    VersionAttr: string
    ContactOrganisationName: MultilingualString
    ContactPersonName: string
    ContactPersonFirstName: string
    ContactPersonPosition: MultilingualString
    ContactDetailsLanguage: string
    ContactDetailsAddress: MultilingualString
    ContactDetailsStreet: string
    ContactDetailsHouseNumber: string
    ContactDetailsPostcode: string
    ContactDetailsCity: MultilingualString
    Country: string
    ContactDetailsTelephoneNumber: string
    ContactDetailsFax: string
    ContactDetailsEMail: string
    UrlLinkAddress: string
    ContactDetailsLogoUrl: string
    Available24hours: boolean
    ContactDetailsResponsibility: Array<MultilingualString>
    ContactDetailsMoreInfo: Array<MultilingualString>
    PublishingAgreement: boolean
    ContactDetailsOwnership: string
    GroupOfLocations: GroupOfLocations
    ContactDetailsExtension: _ExtensionType
}

// CountryEnum ...
export enum CountryEnum {
    at = 'at',
    be = 'be',
    bg = 'bg',
    ch = 'ch',
    cs = 'cs',
    cy = 'cy',
    cz = 'cz',
    de = 'de',
    dk = 'dk',
    ee = 'ee',
    es = 'es',
    fi = 'fi',
    fo = 'fo',
    fr = 'fr',
    gb = 'gb',
    gg = 'gg',
    gi = 'gi',
    gr = 'gr',
    hr = 'hr',
    hu = 'hu',
    ie = 'ie',
    im = 'im',
    is = 'is',
    it = 'it',
    je = 'je',
    li = 'li',
    lt = 'lt',
    lu = 'lu',
    lv = 'lv',
    ma = 'ma',
    mc = 'mc',
    mk = 'mk',
    mt = 'mt',
    nl = 'nl',
    no = 'no',
    pl = 'pl',
    pt = 'pt',
    ro = 'ro',
    se = 'se',
    si = 'si',
    sk = 'sk',
    sm = 'sm',
    tr = 'tr',
    va = 'va',
    other = 'other',
}

// CubicMetres ...
export type CubicMetres = number

// CurrencyEnum ...
export enum CurrencyEnum {
    eur = 'eur',
    all = 'all',
    amd = 'amd',
    azn = 'azn',
    bam = 'bam',
    bgn = 'bgn',
    byr = 'byr',
    chf = 'chf',
    czk = 'czk',
    dkk = 'dkk',
    gbp = 'gbp',
    gel = 'gel',
    hrk = 'hrk',
    huf = 'huf',
    isk = 'isk',
    ltl = 'ltl',
    mdl = 'mdl',
    mkd = 'mkd',
    nok = 'nok',
    pln = 'pln',
    ron = 'ron',
    rsd = 'rsd',
    rub = 'rub',
    sek = 'sek',
    try = 'try',
    uah = 'uah',
    usd = 'usd',
    other = 'other',
}

// D2LogicalModel2 ...
export class D2LogicalModel2 {
    ModelBaseVersionAttr: any
    Exchange: Exchange
    PayloadPublication: PayloadPublication
    D2LogicalModelExtension: _ExtensionType
}

// DangerousGoodsRegulationsEnum ...
export enum DangerousGoodsRegulationsEnum {
    adr = 'adr',
    iataIcao = 'iataIcao',
    imoImdg = 'imoImdg',
    railroadDangerousGoodsBook = 'railroadDangerousGoodsBook',
}

// DataValue ...
export class DataValue {
    AccuracyAttr: number | null
    ComputationalMethodAttr: string | null
    NumberOfIncompleteInputsAttr: number | null
    NumberOfInputValuesUsedAttr: number | null
    SmoothingFactorAttr: number | null
    StandardDeviationAttr: number | null
    SupplierCalculatedDataQualityAttr: number | null
    DataError: boolean
    ReasonForDataError: MultilingualString
    DataValueExtension: _ExtensionType
}

// Date ...
export type Date = string

// DateTime ...
export type DateTime = string

// DateTimeValue ...
export class DateTimeValue extends DataValue {
    DateTime: string
    DateTimeValueExtension: _ExtensionType
}

// DayEnum ...
export enum DayEnum {
    monday = 'monday',
    tuesday = 'tuesday',
    wednesday = 'wednesday',
    thursday = 'thursday',
    friday = 'friday',
    saturday = 'saturday',
    sunday = 'sunday',
}

// DayWeekMonth ...
export class DayWeekMonth {
    ApplicableDay: string
    ApplicableWeek: string
    ApplicableMonth: string
    DayWeekMonthExtension: _ExtensionType
}

// Decimal ...
export type Decimal = number

// DedicatedAccess ...
export class DedicatedAccess {
    DedicatedAccess: _ParkingAccessReference
    DistanceFromParkingSpace: NonNegativeInteger
    DedicatedAccessExtension: _ExtensionType
}

// DelayBandEnum ...
export enum DelayBandEnum {
    negligible = 'negligible',
    upToTenMinutes = 'upToTenMinutes',
    betweenTenMinutesAndThirtyMinutes = 'betweenTenMinutesAndThirtyMinutes',
    betweenThirtyMinutesAndOneHour = 'betweenThirtyMinutesAndOneHour',
    betweenOneHourAndThreeHours = 'betweenOneHourAndThreeHours',
    betweenThreeHoursAndSixHours = 'betweenThreeHoursAndSixHours',
    longerThanSixHours = 'longerThanSixHours',
}

// Delays ...
export class Delays {
    DelayBand: string
    DelaysType: string
    DelayTimeValue: number
    DelaysExtension: _ExtensionType
}

// DelaysTypeEnum ...
export enum DelaysTypeEnum {
    delays = 'delays',
    delaysOfUncertainDuration = 'delaysOfUncertainDuration',
    longDelays = 'longDelays',
    veryLongDelays = 'veryLongDelays',
}

// DenyReasonEnum ...
export enum DenyReasonEnum {
    unknownReason = 'unknownReason',
    wrongCatalogue = 'wrongCatalogue',
    wrongFilter = 'wrongFilter',
    wrongOrder = 'wrongOrder',
    wrongPartner = 'wrongPartner',
}

// Destination ...
export class Destination {
    DestinationExtension: _ExtensionType
}

// Dimension ...
export class Dimension {
    DimensionLength: number
    DimensionWidth: number
    DimensionHeight: number
    DimensionUsableArea: number
    DimensionExtension: _ExtensionType
}

// DirectionBearingValue ...
export class DirectionBearingValue extends DataValue {
    DirectionBearing: number
    DirectionBearingValueExtension: _ExtensionType
}

// DirectionCompassEnum ...
export enum DirectionCompassEnum {
    east = 'east',
    eastNorthEast = 'eastNorthEast',
    eastSouthEast = 'eastSouthEast',
    north = 'north',
    northEast = 'northEast',
    northNorthEast = 'northNorthEast',
    northNorthWest = 'northNorthWest',
    northWest = 'northWest',
    south = 'south',
    southEast = 'southEast',
    southSouthEast = 'southSouthEast',
    southSouthWest = 'southSouthWest',
    southWest = 'southWest',
    west = 'west',
    westNorthWest = 'westNorthWest',
    westSouthWest = 'westSouthWest',
}

// DirectionCompassValue ...
export class DirectionCompassValue extends DataValue {
    DirectionCompass: string
    DirectionCompassValueExtension: _ExtensionType
}

// DirectionEnum ...
export enum DirectionEnum {
    allDirections = 'allDirections',
    bothWays = 'bothWays',
    clockwise = 'clockwise',
    anticlockwise = 'anticlockwise',
    innerRing = 'innerRing',
    outerRing = 'outerRing',
    northBound = 'northBound',
    northEastBound = 'northEastBound',
    eastBound = 'eastBound',
    southEastBound = 'southEastBound',
    southBound = 'southBound',
    southWestBound = 'southWestBound',
    westBound = 'westBound',
    northWestBound = 'northWestBound',
    inboundTowardsTown = 'inboundTowardsTown',
    outboundFromTown = 'outboundFromTown',
    unknown = 'unknown',
    opposite = 'opposite',
    other = 'other',
}

// DistanceAlongLinearElement ...
export class DistanceAlongLinearElement {
    DistanceAlongLinearElementExtension: _ExtensionType
}

// DistanceFromLinearElementReferent ...
export class DistanceFromLinearElementReferent extends DistanceAlongLinearElement {
    DistanceAlong: number
    FromReferent: Referent
    TowardsReferent: Referent
    DistanceFromLinearElementReferentExtension: _ExtensionType
}

// DistanceFromLinearElementStart ...
export class DistanceFromLinearElementStart extends DistanceAlongLinearElement {
    DistanceAlong: number
    DistanceFromLinearElementStartExtension: _ExtensionType
}

// DisturbanceActivity ...
export class DisturbanceActivity extends Activity {
    DisturbanceActivityType: string
    DisturbanceActivityExtension: _ExtensionType
}

// DisturbanceActivityTypeEnum ...
export enum DisturbanceActivityTypeEnum {
    airRaid = 'airRaid',
    altercationOfVehicleOccupants = 'altercationOfVehicleOccupants',
    assault = 'assault',
    assetDestruction = 'assetDestruction',
    attack = 'attack',
    attackOnVehicle = 'attackOnVehicle',
    blockadeOrBarrier = 'blockadeOrBarrier',
    bombAlert = 'bombAlert',
    crowd = 'crowd',
    demonstration = 'demonstration',
    evacuation = 'evacuation',
    filterBlockade = 'filterBlockade',
    goSlowOperation = 'goSlowOperation',
    gunfireOnRoadway = 'gunfireOnRoadway',
    illVehicleOccupants = 'illVehicleOccupants',
    march = 'march',
    publicDisturbance = 'publicDisturbance',
    radioactiveLeakAlert = 'radioactiveLeakAlert',
    riot = 'riot',
    sabotage = 'sabotage',
    securityAlert = 'securityAlert',
    securityIncident = 'securityIncident',
    sightseersObstructingAccess = 'sightseersObstructingAccess',
    strike = 'strike',
    terroristIncident = 'terroristIncident',
    theft = 'theft',
    toxicCloudAlert = 'toxicCloudAlert',
    unspecifiedAlert = 'unspecifiedAlert',
    other = 'other',
}

// DrivingConditionTypeEnum ...
export enum DrivingConditionTypeEnum {
    impossible = 'impossible',
    hazardous = 'hazardous',
    normal = 'normal',
    passableWithCare = 'passableWithCare',
    unknown = 'unknown',
    veryHazardous = 'veryHazardous',
    winterConditions = 'winterConditions',
    other = 'other',
}

// DurationValue ...
export class DurationValue extends DataValue {
    Duration: number
    DurationValueExtension: _ExtensionType
}

// ElaboratedData ...
export class ElaboratedData {
    Forecast: boolean
    Source: Source
    Validity: Validity
    ElaboratedDataFault: Array<ElaboratedDataFault>
    BasicData: BasicData
    ElaboratedDataExtension: _ExtensionType
}

// ElaboratedDataFault ...
export class ElaboratedDataFault extends Fault {
    ElaboratedDataFault: string
    ElaboratedDataFaultExtension: _ExtensionType
}

// ElaboratedDataFaultEnum ...
export enum ElaboratedDataFaultEnum {
    intermittentDataValues = 'intermittentDataValues',
    noDataValuesAvailable = 'noDataValuesAvailable',
    spuriousUnreliableDataValues = 'spuriousUnreliableDataValues',
    unspecifiedOrUnknownFault = 'unspecifiedOrUnknownFault',
    other = 'other',
}

// ElaboratedDataPublication ...
export class ElaboratedDataPublication extends PayloadPublication {
    ForecastDefault: boolean
    PeriodDefault: number
    TimeDefault: string
    HeaderInformation: HeaderInformation
    ReferenceSettings: ReferenceSettings
    ElaboratedData: Array<ElaboratedData>
    ElaboratedDataPublicationExtension: _ExtensionType
}

// ElectricCharging ...
export class ElectricCharging {
    ChargingStationUsageType: string
    ChargingStationModelType: MultilingualString
    MaximumCurrent: number
    Voltage: number
    ChargingStationConnectorType: Array<MultilingualString>
    NumberOfChargingPoints: number
    ElectricChargingExtension: _ExtensionType
}

// EnvironmentalObstruction ...
export class EnvironmentalObstruction extends Obstruction {
    Depth: number
    EnvironmentalObstructionType: string
    EnvironmentalObstructionExtension: _ExtensionType
}

// EnvironmentalObstructionTypeEnum ...
export enum EnvironmentalObstructionTypeEnum {
    avalanches = 'avalanches',
    earthquakeDamage = 'earthquakeDamage',
    fallenTrees = 'fallenTrees',
    fallingIce = 'fallingIce',
    fallingLightIceOrSnow = 'fallingLightIceOrSnow',
    flashFloods = 'flashFloods',
    flooding = 'flooding',
    forestFire = 'forestFire',
    grassFire = 'grassFire',
    landslips = 'landslips',
    mudSlide = 'mudSlide',
    sewerOverflow = 'sewerOverflow',
    rockfalls = 'rockfalls',
    seriousFire = 'seriousFire',
    smokeOrFumes = 'smokeOrFumes',
    stormDamage = 'stormDamage',
    subsidence = 'subsidence',
    other = 'other',
}

// Equipment ...
export class Equipment extends ParkingEquipmentOrServiceFacility {
    EquipmentType: string
    ElectricCharging: ElectricCharging
    EquipmentExtension: _ExtensionType
}

// EquipmentOrSystemFault ...
export class EquipmentOrSystemFault extends TrafficElement {
    EquipmentOrSystemFaultType: string
    FaultyEquipmentOrSystemType: string
    EquipmentOrSystemFaultExtension: _ExtensionType
}

// EquipmentOrSystemFaultTypeEnum ...
export enum EquipmentOrSystemFaultTypeEnum {
    notWorking = 'notWorking',
    outOfService = 'outOfService',
    workingIncorrectly = 'workingIncorrectly',
    workingIntermittently = 'workingIntermittently',
}

// EquipmentOrSystemTypeEnum ...
export enum EquipmentOrSystemTypeEnum {
    anprCameras = 'anprCameras',
    automatedTollSystem = 'automatedTollSystem',
    cctvCameras = 'cctvCameras',
    emergencyRoadsideTelephones = 'emergencyRoadsideTelephones',
    galleryLights = 'galleryLights',
    laneControlSigns = 'laneControlSigns',
    levelCrossing = 'levelCrossing',
    matrixSigns = 'matrixSigns',
    rampControls = 'rampControls',
    roadsideCommunicationsSystem = 'roadsideCommunicationsSystem',
    roadsidePowerSystem = 'roadsidePowerSystem',
    speedControlSigns = 'speedControlSigns',
    streetLighting = 'streetLighting',
    temporaryTrafficLights = 'temporaryTrafficLights',
    tollGates = 'tollGates',
    trafficLightSets = 'trafficLightSets',
    trafficSignals = 'trafficSignals',
    tunnelLights = 'tunnelLights',
    tunnelVentilation = 'tunnelVentilation',
    variableMessageSigns = 'variableMessageSigns',
    other = 'other',
}

// EquipmentTypeEnum ...
export enum EquipmentTypeEnum {
    toilet = 'toilet',
    shower = 'shower',
    informationPoint = 'informationPoint',
    informatonStele = 'informatonStele',
    internetTerminal = 'internetTerminal',
    internetWireless = 'internetWireless',
    payDesk = 'payDesk',
    paymentMachine = 'paymentMachine',
    cashMachine = 'cashMachine',
    vendingMachine = 'vendingMachine',
    faxMachineOrService = 'faxMachineOrService',
    copyMachineOrService = 'copyMachineOrService',
    safeDeposit = 'safeDeposit',
    luggageLocker = 'luggageLocker',
    publicPhone = 'publicPhone',
    publicCoinPhone = 'publicCoinPhone',
    publicCardPhone = 'publicCardPhone',
    elevator = 'elevator',
    picnicFacilities = 'picnicFacilities',
    dumpingStation = 'dumpingStation',
    freshWater = 'freshWater',
    wasteDisposal = 'wasteDisposal',
    refuseBin = 'refuseBin',
    iceFreeScaffold = 'iceFreeScaffold',
    playground = 'playground',
    electricChargingStation = 'electricChargingStation',
    bikeParking = 'bikeParking',
    tollTerminal = 'tollTerminal',
    defibrillator = 'defibrillator',
    firstAidEquipment = 'firstAidEquipment',
    fireHose = 'fireHose',
    fireExtingiusher = 'fireExtingiusher',
    fireHydrant = 'fireHydrant',
    none = 'none',
    unknown = 'unknown',
    other = 'other',
}

// Exchange ...
export class Exchange {
    ChangedFlag: string
    ClientIdentification: string
    DeliveryBreak: boolean
    DenyReason: string
    HistoricalStartDate: string
    HistoricalStopDate: string
    KeepAlive: boolean
    RequestType: string
    Response: string
    SubscriptionReference: string
    SupplierIdentification: InternationalIdentifier
    Target: Target
    Subscription: Subscription
    FilterReference: Array<FilterReference>
    CatalogueReference: Array<CatalogueReference>
    ExchangeExtension: _ExtensionType
}

// ExternalReferencing ...
export class ExternalReferencing {
    ExternalLocationCode: string
    ExternalReferencingSystem: string
    ExternalReferencingExtension: _ExtensionType
}

// Fault ...
export class Fault {
    FaultIdentifier: string
    FaultDescription: string
    FaultCreationTime: string
    FaultLastUpdateTime: string
    FaultSeverity: string
    FaultExtension: _ExtensionType
}

// FaultSeverityEnum ...
export enum FaultSeverityEnum {
    low = 'low',
    medium = 'medium',
    high = 'high',
    unknown = 'unknown',
}

// FilterExitManagement ...
export class FilterExitManagement {
    FilterEnd: boolean
    FilterOutOfRange: boolean
    FilterExitManagementExtension: _ExtensionType
}

// FilterReference ...
export class FilterReference {
    DeleteFilter: boolean
    FilterOperationApproved: boolean
    KeyFilterReference: string
    FilterReferenceExtension: _ExtensionType
}

// Float ...
export type Float = number

// FloatingPointMetreDistanceValue ...
export class FloatingPointMetreDistanceValue extends DataValue {
    FloatingPointMetreDistance: number
    FloatingPointMetreDistanceValueExtension: _ExtensionType
}

// FuelType2Enum ...
export enum FuelType2Enum {
    all = 'all',
    petrol95Octane = 'petrol95Octane',
    petrol98Octane = 'petrol98Octane',
    petrolLeaded = 'petrolLeaded',
    petrolUnleaded = 'petrolUnleaded',
    unknown = 'unknown',
    other = 'other',
}

// FuelTypeEnum ...
export enum FuelTypeEnum {
    battery = 'battery',
    biodiesel = 'biodiesel',
    diesel = 'diesel',
    dieselBatteryHybrid = 'dieselBatteryHybrid',
    ethanol = 'ethanol',
    hydrogen = 'hydrogen',
    liquidGas = 'liquidGas',
    lpg = 'lpg',
    methane = 'methane',
    petrol = 'petrol',
    petrolBatteryHybrid = 'petrolBatteryHybrid',
}

// GeneralInstructionOrMessageToRoadUsers ...
export class GeneralInstructionOrMessageToRoadUsers extends NetworkManagement {
    GeneralInstructionToRoadUsersType: string
    GeneralMessageToRoadUsers: MultilingualString
    GeneralInstructionOrMessageToRoadUsersExtension: _ExtensionType
}

// GeneralInstructionToRoadUsersTypeEnum ...
export enum GeneralInstructionToRoadUsersTypeEnum {
    allowEmergencyVehiclesToPass = 'allowEmergencyVehiclesToPass',
    approachWithCare = 'approachWithCare',
    avoidTheArea = 'avoidTheArea',
    closeAllWindowsTurnOffHeaterAndVents = 'closeAllWindowsTurnOffHeaterAndVents',
    crossJunctionWithCare = 'crossJunctionWithCare',
    doNotAllowUnnecessaryGaps = 'doNotAllowUnnecessaryGaps',
    doNotLeaveYourVehicle = 'doNotLeaveYourVehicle',
    doNotThrowOutAnyBurningObjects = 'doNotThrowOutAnyBurningObjects',
    doNotUseNavigationSystems = 'doNotUseNavigationSystems',
    driveCarefully = 'driveCarefully',
    driveWithExtremeCaution = 'driveWithExtremeCaution',
    flashYourLights = 'flashYourLights',
    followTheVehicleInFrontSmoothly = 'followTheVehicleInFrontSmoothly',
    increaseNormalFollowingDistance = 'increaseNormalFollowingDistance',
    inEmergencyWaitForPatrolService = 'inEmergencyWaitForPatrolService',
    keepYourDistance = 'keepYourDistance',
    leaveYourVehicleProceedToNextSafePlace = 'leaveYourVehicleProceedToNextSafePlace',
    noNakedFlames = 'noNakedFlames',
    noOvertaking = 'noOvertaking',
    noSmoking = 'noSmoking',
    noStopping = 'noStopping',
    noUturns = 'noUturns',
    observeAmberAlert = 'observeAmberAlert',
    observeSignals = 'observeSignals',
    observeSigns = 'observeSigns',
    onlyTravelIfAbsolutelyNecessary = 'onlyTravelIfAbsolutelyNecessary',
    overtakeWithCare = 'overtakeWithCare',
    pullOverToTheEdgeOfTheRoadway = 'pullOverToTheEdgeOfTheRoadway',
    stopAtNextSafePlace = 'stopAtNextSafePlace',
    stopAtNextServiceArea = 'stopAtNextServiceArea',
    switchOffEngine = 'switchOffEngine',
    switchOffMobilePhonesAndTwoWayRadios = 'switchOffMobilePhonesAndTwoWayRadios',
    testYourBrakes = 'testYourBrakes',
    useBusService = 'useBusService',
    useFogLights = 'useFogLights',
    useHazardWarningLights = 'useHazardWarningLights',
    useHeadlights = 'useHeadlights',
    useRailService = 'useRailService',
    useTramService = 'useTramService',
    useUndergroundService = 'useUndergroundService',
    waitForEscortVehicle = 'waitForEscortVehicle',
    other = 'other',
}

// GeneralNetworkManagement ...
export class GeneralNetworkManagement extends NetworkManagement {
    GeneralNetworkManagementType: string
    TrafficManuallyDirectedBy: string
    GeneralNetworkManagementExtension: _ExtensionType
}

// GeneralNetworkManagementTypeEnum ...
export enum GeneralNetworkManagementTypeEnum {
    bridgeSwingInOperation = 'bridgeSwingInOperation',
    convoyService = 'convoyService',
    obstacleSignalling = 'obstacleSignalling',
    rampMeteringInOperation = 'rampMeteringInOperation',
    temporaryTrafficLights = 'temporaryTrafficLights',
    tollGatesOpen = 'tollGatesOpen',
    trafficBeingManuallyDirected = 'trafficBeingManuallyDirected',
    trafficHeld = 'trafficHeld',
    other = 'other',
}

// GeneralObstruction ...
export class GeneralObstruction extends Obstruction {
    ObstructionType: string
    GroupOfPeopleInvolved: Array<GroupOfPeopleInvolved>
    GeneralObstructionExtension: _ExtensionType
}

// GenericPublication ...
export class GenericPublication extends PayloadPublication {
    GenericPublicationName: string
    GenericPublicationExtension: _GenericPublicationExtensionType
}

// GenericSituationRecord ...
export class GenericSituationRecord extends SituationRecord {
    GenericSituationRecordName: string
    GenericSituationRecordExtension: _ExtensionType
}

// GrossWeightCharacteristic ...
export class GrossWeightCharacteristic {
    ComparisonOperator: string
    GrossVehicleWeight: number
    GrossWeightCharacteristicExtension: _ExtensionType
}

// GroupOfLocations ...
export class GroupOfLocations {
    GroupOfLocationsExtension: _ExtensionType
}

// GroupOfParkingSites ...
export class GroupOfParkingSites extends ParkingRecord {
    GroupOfParkingSitesType: string
    ParkingSiteByReference: Array<_ParkingRecordVersionedReference>
    ParkingSite: Array<ParkingSite>
    GroupOfParkingSitesExtension: _ExtensionType
}

// GroupOfParkingSitesStatus ...
export class GroupOfParkingSitesStatus extends ParkingRecordStatus {
    GroupOfParkingSitesStatus: string
    GroupOfParkingSitesStatusExtension: _ExtensionType
}

// GroupOfParkingSitesStatusEnum ...
export enum GroupOfParkingSitesStatusEnum {
    allParkingsFull = 'allParkingsFull',
    multiStoreyParkingsFull = 'multiStoreyParkingsFull',
    noMoreParkingSpacesAvailable = 'noMoreParkingSpacesAvailable',
    enoughSpacesAvailable = 'enoughSpacesAvailable',
    unknown = 'unknown',
    other = 'other',
}

// GroupOfParkingSitesTypeEnum ...
export enum GroupOfParkingSitesTypeEnum {
    parkingArea = 'parkingArea',
    truckParkingPriorityZone = 'truckParkingPriorityZone',
    aggregationOfInformation = 'aggregationOfInformation',
    inhabitantZone = 'inhabitantZone',
}

// GroupOfParkingSpaces ...
export class GroupOfParkingSpaces extends ParkingSpaceBasics {
    ParkingNumberOfSpaces: number
    ParkingTypeOfGroup: string
    IdenticalToGroup: Array<String>
    RealSubsetOfGroup: Array<String>
    MinimumParkingSpaceDimension: Dimension
    DimensionOfGroup: Dimension
    MaximumParkingSpaceDimension: Dimension
    ParkingSpace: Array<_GroupOfParkingSpacesParkingSpaceIndexParkingSpace>
    GroupOfLocations: GroupOfLocations
    GroupOfParkingSpacesExtension: _ExtensionType
}

// GroupOfParkingSpacesStatus ...
export class GroupOfParkingSpacesStatus extends ParkingOccupancy {
    GroupDeclarationValidNow: boolean
    GroupOfParkingSpacesClosed: boolean
    GroupOfParkingSpacesStatusExtension: _ExtensionType
}

// GroupOfPeopleInvolved ...
export class GroupOfPeopleInvolved {
    NumberOfPeople: number
    InjuryStatus: string
    InvolvementRole: string
    CategoryOfPeopleInvolved: string
    GroupOfPeopleInvolvedExtension: _ExtensionType
}

// GroupOfVehiclesInvolved ...
export class GroupOfVehiclesInvolved {
    NumberOfVehicles: number
    VehicleStatus: string
    VehicleCharacteristics: VehicleCharacteristics
    GroupOfVehiclesInvolvedExtension: _ExtensionType
}

// HazardousMaterials ...
export class HazardousMaterials {
    ChemicalName: MultilingualString
    DangerousGoodsFlashPoint: number
    DangerousGoodsRegulations: string
    HazardCodeIdentification: string
    HazardCodeVersionNumber: number
    HazardSubstanceItemPageNumber: string
    TremCardNumber: string
    UndgNumber: string
    VolumeOfDangerousGoods: number
    WeightOfDangerousGoods: number
    HazardousMaterialsExtension: _ExtensionType
}

// HeaderInformation ...
export class HeaderInformation {
    AreaOfInterest: string
    Confidentiality: string
    InformationStatus: string
    Urgency: string
    HeaderInformationExtension: _ExtensionType
}

// HeaviestAxleWeightCharacteristic ...
export class HeaviestAxleWeightCharacteristic {
    ComparisonOperator: string
    HeaviestAxleWeight: number
    HeaviestAxleWeightCharacteristicExtension: _ExtensionType
}

// HeightCharacteristic ...
export class HeightCharacteristic {
    ComparisonOperator: string
    VehicleHeight: number
    HeightCharacteristicExtension: _ExtensionType
}

// HeightGradeEnum ...
export enum HeightGradeEnum {
    aboveGrade = 'aboveGrade',
    atGrade = 'atGrade',
    belowGrade = 'belowGrade',
}

// Humidity ...
export class Humidity {
    RelativeHumidity: PercentageValue
    HumidityExtension: _ExtensionType
}

// HumidityInformation ...
export class HumidityInformation extends WeatherData {
    Humidity: Humidity
    HumidityInformationExtension: _ExtensionType
}

// Impact ...
export class Impact {
    CapacityRemaining: number
    NumberOfLanesRestricted: number
    NumberOfOperationalLanes: number
    OriginalNumberOfLanes: number
    ResidualRoadWidth: number
    TrafficConstrictionType: string
    Delays: Delays
    ImpactExtension: _ExtensionType
}

// IndexReference ...
export type IndexReference = string

// IndividualCharge ...
export class IndividualCharge {
    ChargeBandReference: _ChargeBandVersionedReference
    ChargePaid: number
    ChargeCurrency: string
    UsedMeansOfPayment: string
    WithReservation: boolean
    UsedPaymentCard: UsedPaymentCard
    IndividualChargeExtension: _ExtensionType
}

// IndividualVehicleDataValues ...
export class IndividualVehicleDataValues extends TrafficData {
    IndividualVehicleSpeed: SpeedValue
    ArrivalTime: DateTimeValue
    ExitTime: DateTimeValue
    PassageDurationTime: DurationValue
    PresenceDurationTime: DurationValue
    TimeGap: DurationValue
    TimeHeadway: DurationValue
    DistanceGap: FloatingPointMetreDistanceValue
    DistanceHeadway: FloatingPointMetreDistanceValue
    IndividualVehicleDataValuesExtension: _ExtensionType
}

// InformationStatusEnum ...
export enum InformationStatusEnum {
    real = 'real',
    securityExercise = 'securityExercise',
    technicalExercise = 'technicalExercise',
    test = 'test',
}

// InfrastructureDamageObstruction ...
export class InfrastructureDamageObstruction extends Obstruction {
    InfrastructureDamageType: string
    InfrastructureDamageObstructionExtension: _ExtensionType
}

// InfrastructureDamageTypeEnum ...
export enum InfrastructureDamageTypeEnum {
    burstPipe = 'burstPipe',
    burstWaterMain = 'burstWaterMain',
    collapsedSewer = 'collapsedSewer',
    damagedBridge = 'damagedBridge',
    damagedCrashBarrier = 'damagedCrashBarrier',
    damagedFlyover = 'damagedFlyover',
    damagedGallery = 'damagedGallery',
    damagedGantry = 'damagedGantry',
    damagedRoadSurface = 'damagedRoadSurface',
    damagedTunnel = 'damagedTunnel',
    damagedViaduct = 'damagedViaduct',
    fallenPowerCables = 'fallenPowerCables',
    gasLeak = 'gasLeak',
    weakBridge = 'weakBridge',
    other = 'other',
}

// InjuryStatusTypeEnum ...
export enum InjuryStatusTypeEnum {
    dead = 'dead',
    injured = 'injured',
    seriouslyInjured = 'seriouslyInjured',
    slightlyInjured = 'slightlyInjured',
    uninjured = 'uninjured',
    unknown = 'unknown',
}

// Integer ...
export type Integer = number

// IntegerMetreDistanceValue ...
export class IntegerMetreDistanceValue extends DataValue {
    IntegerMetreDistance: NonNegativeInteger
    IntegerMetreDistanceValueExtension: _ExtensionType
}

// IntensityKilogramsPerSquareMetre ...
export type IntensityKilogramsPerSquareMetre = number

// IntensityMillimetresPerHour ...
export type IntensityMillimetresPerHour = number

// InternationalIdentifier ...
export class InternationalIdentifier {
    Country: string
    NationalIdentifier: string
    InternationalIdentifierExtension: _ExtensionType
}

// InterUrbanParkingSite ...
export class InterUrbanParkingSite extends ParkingSite {
    InterUrbanParkingSiteLocation: string
    InterUrbanParkingSiteExtension: _ExtensionType
}

// InterUrbanParkingSiteLocationEnum ...
export enum InterUrbanParkingSiteLocationEnum {
    motorway = 'motorway',
    nearbyMotorway = 'nearbyMotorway',
    layBy = 'layBy',
    onStreet = 'onStreet',
    other = 'other',
}

// InvolvementRolesEnum ...
export enum InvolvementRolesEnum {
    cyclist = 'cyclist',
    pedestrian = 'pedestrian',
    unknown = 'unknown',
    vehicleDriver = 'vehicleDriver',
    vehicleOccupant = 'vehicleOccupant',
    vehiclePassenger = 'vehiclePassenger',
    witness = 'witness',
}

// Itinerary ...
export class Itinerary extends GroupOfLocations {
    RouteDestination: Array<Destination>
    ItineraryExtension: _ExtensionType
}

// ItineraryByIndexedLocations ...
export class ItineraryByIndexedLocations extends Itinerary {
    LocationContainedInItinerary: Array<_LocationContainedInItinerary>
    ItineraryByIndexedLocationsExtension: _ExtensionType
}

// ItineraryByReference ...
export class ItineraryByReference extends Itinerary {
    PredefinedItineraryReference: _PredefinedItineraryVersionedReference
    ItineraryByReferenceExtension: _ExtensionType
}

// Junction ...
export class Junction {
    JunctionClassification: string
    JunctionName: MultilingualString
    JunctionNumber: string
    Motorway: Road
    DestinationMotorway: Array<Road>
    JunctionExtension: _ExtensionType
}

// JunctionClassificationEnum ...
export enum JunctionClassificationEnum {
    threeWayInterchange = 'threeWayInterchange',
    interchange = 'interchange',
    motorwayConnection = 'motorwayConnection',
    junction = 'junction',
    temporaryJunction = 'temporaryJunction',
    borderCrossing = 'borderCrossing',
    junctionInOneDirection = 'junctionInOneDirection',
    operationalServiceJunction = 'operationalServiceJunction',
    other = 'other',
}

// KilogramsConcentrationValue ...
export class KilogramsConcentrationValue extends DataValue {
    KilogramsConcentration: number
    KilogramsConcentrationValueExtension: _ExtensionType
}

// KilometresPerHour ...
export type KilometresPerHour = number

// LABELSecurityLevelEnum ...
export enum LABELSecurityLevelEnum {
    none = 'none',
    securityLevel1 = 'securityLevel1',
    securityLevel2 = 'securityLevel2',
    securityLevel3 = 'securityLevel3',
    securityLevel4 = 'securityLevel4',
    securityLevel5 = 'securityLevel5',
    unknown = 'unknown',
}

// LABELServiceLevelEnum ...
export enum LABELServiceLevelEnum {
    none = 'none',
    serviceLevel1 = 'serviceLevel1',
    serviceLevel2 = 'serviceLevel2',
    serviceLevel3 = 'serviceLevel3',
    serviceLevel4 = 'serviceLevel4',
    serviceLevel5 = 'serviceLevel5',
    unknown = 'unknown',
}

// LaneEnum ...
export enum LaneEnum {
    allLanesCompleteCarriageway = 'allLanesCompleteCarriageway',
    busLane = 'busLane',
    busStop = 'busStop',
    carPoolLane = 'carPoolLane',
    centralReservation = 'centralReservation',
    crawlerLane = 'crawlerLane',
    emergencyLane = 'emergencyLane',
    escapeLane = 'escapeLane',
    expressLane = 'expressLane',
    hardShoulder = 'hardShoulder',
    heavyVehicleLane = 'heavyVehicleLane',
    lane1 = 'lane1',
    lane2 = 'lane2',
    lane3 = 'lane3',
    lane4 = 'lane4',
    lane5 = 'lane5',
    lane6 = 'lane6',
    lane7 = 'lane7',
    lane8 = 'lane8',
    lane9 = 'lane9',
    layBy = 'layBy',
    leftHandTurningLane = 'leftHandTurningLane',
    leftLane = 'leftLane',
    localTrafficLane = 'localTrafficLane',
    middleLane = 'middleLane',
    opposingLanes = 'opposingLanes',
    overtakingLane = 'overtakingLane',
    rightHandTurningLane = 'rightHandTurningLane',
    rightLane = 'rightLane',
    rushHourLane = 'rushHourLane',
    setDownArea = 'setDownArea',
    slowVehicleLane = 'slowVehicleLane',
    throughTrafficLane = 'throughTrafficLane',
    tidalFlowLane = 'tidalFlowLane',
    turningLane = 'turningLane',
    verge = 'verge',
}

// Language ...
export type Language = string

// LengthCharacteristic ...
export class LengthCharacteristic {
    ComparisonOperator: string
    VehicleLength: number
    LengthCharacteristicExtension: _ExtensionType
}

// LifeCycleManagement ...
export class LifeCycleManagement {
    Cancel: boolean
    End: boolean
    LifeCycleManagementExtension: _ExtensionType
}

// Linear ...
export class Linear extends NetworkLocation {
    TpegLinearLocation: TpegLinearLocation
    AlertCLinear: AlertCLinear
    LinearWithinLinearElement: LinearWithinLinearElement
    LinearExtension: _LinearExtensionType
}

// LinearElement ...
export class LinearElement {
    RoadName: MultilingualString
    RoadNumber: string
    LinearElementReferenceModel: string
    LinearElementReferenceModelVersion: string
    LinearElementNature: string
    LinearElementExtension: _ExtensionType
}

// LinearElementByCode ...
export class LinearElementByCode extends LinearElement {
    LinearElementIdentifier: string
    LinearElementByCodeExtension: _ExtensionType
}

// LinearElementByPoints ...
export class LinearElementByPoints extends LinearElement {
    StartPointOfLinearElement: Referent
    IntermediatePointOnLinearElement: Array<_IntermediatePointOnLinearElement>
    EndPointOfLinearElement: Referent
    LinearElementByPointsExtension: _ExtensionType
}

// LinearElementNatureEnum ...
export enum LinearElementNatureEnum {
    road = 'road',
    roadSection = 'roadSection',
    slipRoad = 'slipRoad',
    other = 'other',
}

// LinearReferencingDirectionEnum ...
export enum LinearReferencingDirectionEnum {
    both = 'both',
    opposite = 'opposite',
    aligned = 'aligned',
    unknown = 'unknown',
}

// LinearTrafficView ...
export class LinearTrafficView {
    IdAttr: string
    LinearPredefinedLocationReference: _PredefinedLocationVersionedReference
    TrafficViewRecord: Array<TrafficViewRecord>
    LinearTrafficViewExtension: _ExtensionType
}

// LinearWithinLinearElement ...
export class LinearWithinLinearElement {
    AdministrativeAreaOfLinearSection: MultilingualString
    DirectionBoundOnLinearSection: string
    DirectionRelativeOnLinearSection: string
    HeightGradeOfLinearSection: string
    LinearElement: LinearElement
    FromPoint: DistanceAlongLinearElement
    ToPoint: DistanceAlongLinearElement
    LinearWithinLinearElementExtension: _ExtensionType
}

// LoadType2Enum ...
export enum LoadType2Enum {
    refrigeratedGoods = 'refrigeratedGoods',
}

// LoadTypeEnum ...
export enum LoadTypeEnum {
    abnormalLoad = 'abnormalLoad',
    ammunition = 'ammunition',
    chemicals = 'chemicals',
    combustibleMaterials = 'combustibleMaterials',
    corrosiveMaterials = 'corrosiveMaterials',
    debris = 'debris',
    empty = 'empty',
    explosiveMaterials = 'explosiveMaterials',
    extraHighLoad = 'extraHighLoad',
    extraLongLoad = 'extraLongLoad',
    extraWideLoad = 'extraWideLoad',
    fuel = 'fuel',
    glass = 'glass',
    goods = 'goods',
    hazardousMaterials = 'hazardousMaterials',
    liquid = 'liquid',
    livestock = 'livestock',
    materials = 'materials',
    materialsDangerousForPeople = 'materialsDangerousForPeople',
    materialsDangerousForTheEnvironment = 'materialsDangerousForTheEnvironment',
    materialsDangerousForWater = 'materialsDangerousForWater',
    oil = 'oil',
    ordinary = 'ordinary',
    perishableProducts = 'perishableProducts',
    petrol = 'petrol',
    pharmaceuticalMaterials = 'pharmaceuticalMaterials',
    radioactiveMaterials = 'radioactiveMaterials',
    refuse = 'refuse',
    toxicMaterials = 'toxicMaterials',
    vehicles = 'vehicles',
    other = 'other',
}

// Location ...
export class Location extends GroupOfLocations {
    ExternalReferencing: Array<ExternalReferencing>
    LocationForDisplay: PointCoordinates
    LocationExtension: _ExtensionType
}

// LocationByReference ...
export class LocationByReference extends Location {
    PredefinedLocationReference: _PredefinedLocationVersionedReference
    LocationByReferenceExtension: _ExtensionType
}

// LocationCharacteristicsOverride ...
export class LocationCharacteristicsOverride {
    MeasurementLanesOverride: string
    ReversedFlow: boolean
    LocationCharacteristicsOverrideExtension: _ExtensionType
}

// LocationDescriptorEnum ...
export enum LocationDescriptorEnum {
    aroundABendInRoad = 'aroundABendInRoad',
    atMotorwayInterchange = 'atMotorwayInterchange',
    atRestArea = 'atRestArea',
    atServiceArea = 'atServiceArea',
    atTollPlaza = 'atTollPlaza',
    atTunnelEntryOrExit = 'atTunnelEntryOrExit',
    inbound = 'inbound',
    inGallery = 'inGallery',
    inTheCentre = 'inTheCentre',
    inTheOppositeDirection = 'inTheOppositeDirection',
    inTunnel = 'inTunnel',
    onBorder = 'onBorder',
    onBridge = 'onBridge',
    onConnector = 'onConnector',
    onElevatedSection = 'onElevatedSection',
    onFlyover = 'onFlyover',
    onIceRoad = 'onIceRoad',
    onLevelCrossing = 'onLevelCrossing',
    onLinkRoad = 'onLinkRoad',
    onPass = 'onPass',
    onRoundabout = 'onRoundabout',
    onTheLeft = 'onTheLeft',
    onTheRight = 'onTheRight',
    onTheRoadway = 'onTheRoadway',
    onUndergroundSection = 'onUndergroundSection',
    onUnderpass = 'onUnderpass',
    outbound = 'outbound',
    overCrestOfHill = 'overCrestOfHill',
    withinJunction = 'withinJunction',
}

// MaintenanceVehicleActionsEnum ...
export enum MaintenanceVehicleActionsEnum {
    maintenanceVehiclesMergingIntoTrafficFlow = 'maintenanceVehiclesMergingIntoTrafficFlow',
    saltAndGritSpreading = 'saltAndGritSpreading',
    slowMoving = 'slowMoving',
    snowClearing = 'snowClearing',
    stoppingToServiceEquipments = 'stoppingToServiceEquipments',
}

// MaintenanceVehicles ...
export class MaintenanceVehicles {
    NumberOfMaintenanceVehicles: number
    MaintenanceVehicleActions: string
    MaintenanceVehiclesExtension: _ExtensionType
}

// MaintenanceWorks ...
export class MaintenanceWorks extends Roadworks {
    RoadMaintenanceType: string
    MaintenanceWorksExtension: _ExtensionType
}

// ManagedCause ...
export class ManagedCause extends Cause {
    ManagedCause: _SituationRecordVersionedReference
    ManagedCauseExtension: _ExtensionType
}

// Management ...
export class Management {
    LifeCycleManagement: LifeCycleManagement
    FilterExitManagement: FilterExitManagement
    ManagementExtension: _ExtensionType
}

// MeansOfPaymentEnum ...
export enum MeansOfPaymentEnum {
    paymentCard = 'paymentCard',
    cash = 'cash',
    cashCoinsOnly = 'cashCoinsOnly',
    directCashTransfer = 'directCashTransfer',
    electronicSettlement = 'electronicSettlement',
    rfid = 'rfid',
    mobileApp = 'mobileApp',
    payBySMS = 'payBySMS',
    mobilePhone = 'mobilePhone',
    unknown = 'unknown',
    other = 'other',
}

// MeasuredDataPublication ...
export class MeasuredDataPublication extends PayloadPublication {
    MeasurementSiteTableReference: _MeasurementSiteTableVersionedReference
    HeaderInformation: HeaderInformation
    SiteMeasurements: Array<SiteMeasurements>
    MeasuredDataPublicationExtension: _ExtensionType
}

// MeasuredOrDerivedDataTypeEnum ...
export enum MeasuredOrDerivedDataTypeEnum {
    humidityInformation = 'humidityInformation',
    individualVehicleMeasurements = 'individualVehicleMeasurements',
    pollutionInformation = 'pollutionInformation',
    precipitationInformation = 'precipitationInformation',
    pressureInformation = 'pressureInformation',
    radiationInformation = 'radiationInformation',
    roadSurfaceConditionInformation = 'roadSurfaceConditionInformation',
    temperatureInformation = 'temperatureInformation',
    trafficConcentration = 'trafficConcentration',
    trafficFlow = 'trafficFlow',
    trafficHeadway = 'trafficHeadway',
    trafficSpeed = 'trafficSpeed',
    trafficStatusInformation = 'trafficStatusInformation',
    travelTimeInformation = 'travelTimeInformation',
    visibilityInformation = 'visibilityInformation',
    windInformation = 'windInformation',
}

// MeasuredValue ...
export class MeasuredValue {
    MeasurementEquipmentTypeUsed: MultilingualString
    LocationCharacteristicsOverride: LocationCharacteristicsOverride
    MeasurementEquipmentFault: Array<MeasurementEquipmentFault>
    BasicData: BasicData
    MeasuredValueExtension: _ExtensionType
}

// MeasurementEquipmentFault ...
export class MeasurementEquipmentFault extends Fault {
    MeasurementEquipmentFault: string
    MeasurementEquipmentFaultExtension: _ExtensionType
}

// MeasurementEquipmentFaultEnum ...
export enum MeasurementEquipmentFaultEnum {
    intermittentDataValues = 'intermittentDataValues',
    noDataValuesAvailable = 'noDataValuesAvailable',
    spuriousUnreliableDataValues = 'spuriousUnreliableDataValues',
    unspecifiedOrUnknownFault = 'unspecifiedOrUnknownFault',
    other = 'other',
}

// MeasurementSiteRecord ...
export class MeasurementSiteRecord {
    IdAttr: string
    VersionAttr: string
    MeasurementSiteRecordVersionTime: string
    ComputationMethod: string
    MeasurementEquipmentReference: string
    MeasurementEquipmentTypeUsed: MultilingualString
    MeasurementSiteName: MultilingualString
    MeasurementSiteNumberOfLanes: number
    MeasurementSiteIdentification: string
    MeasurementSide: string
    MeasurementSpecificCharacteristics: Array<_MeasurementSiteRecordIndexMeasurementSpecificCharacteristics>
    MeasurementSiteLocation: GroupOfLocations
    MeasurementSiteRecordExtension: _ExtensionType
}

// MeasurementSiteTable ...
export class MeasurementSiteTable {
    IdAttr: string
    VersionAttr: string
    MeasurementSiteTableIdentification: string
    MeasurementSiteRecord: Array<MeasurementSiteRecord>
    MeasurementSiteTableExtension: _ExtensionType
}

// MeasurementSiteTablePublication ...
export class MeasurementSiteTablePublication extends PayloadPublication {
    HeaderInformation: HeaderInformation
    MeasurementSiteTable: Array<MeasurementSiteTable>
    MeasurementSiteTablePublicationExtension: _ExtensionType
}

// MeasurementSpecificCharacteristics ...
export class MeasurementSpecificCharacteristics {
    Accuracy: number
    Period: number
    SmoothingFactor: number
    SpecificLane: string
    SpecificMeasurementValueType: string
    SpecificVehicleCharacteristics: VehicleCharacteristics
    MeasurementSpecificCharacteristicsExtension: _ExtensionType
}

// MetresAsFloat ...
export type MetresAsFloat = number

// MetresAsNonNegativeInteger ...
export type MetresAsNonNegativeInteger = number

// MicrogramsConcentrationValue ...
export class MicrogramsConcentrationValue extends DataValue {
    MicrogramsConcentration: number
    MicrogramsConcentrationValueExtension: _ExtensionType
}

// Mobility ...
export class Mobility {
    MobilityType: string
    MobilityExtension: _ExtensionType
}

// MobilityEnum ...
export enum MobilityEnum {
    mobile = 'mobile',
    stationary = 'stationary',
    unknown = 'unknown',
}

// MonthOfYearEnum ...
export enum MonthOfYearEnum {
    january = 'january',
    february = 'february',
    march = 'march',
    april = 'april',
    may = 'may',
    june = 'june',
    july = 'july',
    august = 'august',
    september = 'september',
    october = 'october',
    november = 'november',
    december = 'december',
}

// Values ...
export class Values {
    Value: Array<MultilingualStringValue>
}

// MultilingualString ...
export class MultilingualString {
    Values: Values
}

// MultilingualStringValue ...
export class MultilingualStringValue extends String {
    LangAttr: string | null
}

// MultilingualStringValueType ...
export type MultilingualStringValueType = string

// NamedArea ...
export class NamedArea {
    Country: string
    Nation: MultilingualString
    County: MultilingualString
    AreaName: MultilingualString
    PoliceForceControlArea: MultilingualString
    RoadOperatorControlArea: MultilingualString
    NamedAreaExtension: _ExtensionType
}

// NetworkLocation ...
export class NetworkLocation extends Location {
    SupplementaryPositionalDescription: SupplementaryPositionalDescription
    Destination: Destination
    NetworkLocationExtension: _ExtensionType
}

// NetworkManagement ...
export class NetworkManagement extends OperatorAction {
    ComplianceOption: string
    ApplicableForTrafficDirection: string
    ApplicableForTrafficType: string
    PlacesAtWhichApplicable: string
    AutomaticallyInitiated: boolean
    ForVehiclesWithCharacteristicsOf: Array<VehicleCharacteristics>
    NetworkManagementExtension: _ExtensionType
}

// NonManagedCause ...
export class NonManagedCause extends Cause {
    CauseDescription: MultilingualString
    CauseType: string
    NonManagedCauseExtension: _ExtensionType
}

// NonNegativeInteger ...
export type NonNegativeInteger = number

// NonOrderedLocationGroupByList ...
export class NonOrderedLocationGroupByList extends NonOrderedLocations {
    LocationContainedInGroup: Array<Location>
    NonOrderedLocationGroupByListExtension: _ExtensionType
}

// NonOrderedLocationGroupByReference ...
export class NonOrderedLocationGroupByReference extends NonOrderedLocations {
    PredefinedNonOrderedLocationGroupReference: _PredefinedNonOrderedLocationGroupVersionedReference
    NonOrderedLocationGroupByReferenceExtension: _ExtensionType
}

// NonOrderedLocations ...
export class NonOrderedLocations extends GroupOfLocations {
    NonOrderedLocationsExtension: _ExtensionType
}

// NonRoadEventInformation ...
export class NonRoadEventInformation extends SituationRecord {
    NonRoadEventInformationExtension: _ExtensionType
}

// NonWeatherRelatedRoadConditions ...
export class NonWeatherRelatedRoadConditions extends RoadConditions {
    NonWeatherRelatedRoadConditionType: string
    NonWeatherRelatedRoadConditionsExtension: _ExtensionType
}

// NonWeatherRelatedRoadConditionTypeEnum ...
export enum NonWeatherRelatedRoadConditionTypeEnum {
    dieselOnRoad = 'dieselOnRoad',
    leavesOnRoad = 'leavesOnRoad',
    looseChippings = 'looseChippings',
    looseSandOnRoad = 'looseSandOnRoad',
    mudOnRoad = 'mudOnRoad',
    oilOnRoad = 'oilOnRoad',
    petrolOnRoad = 'petrolOnRoad',
    roadSurfaceInPoorCondition = 'roadSurfaceInPoorCondition',
    slipperyRoad = 'slipperyRoad',
    other = 'other',
}

// NumberOfAxlesCharacteristic ...
export class NumberOfAxlesCharacteristic {
    ComparisonOperator: string
    NumberOfAxles: number
    NumberOfAxlesCharacteristicExtension: _ExtensionType
}

// Obstruction ...
export class Obstruction extends TrafficElement {
    NumberOfObstructions: number
    MobilityOfObstruction: Mobility
    ObstructionExtension: _ExtensionType
}

// ObstructionTypeEnum ...
export enum ObstructionTypeEnum {
    airCrash = 'airCrash',
    childrenOnRoadway = 'childrenOnRoadway',
    clearanceWork = 'clearanceWork',
    craneOperating = 'craneOperating',
    cyclistsOnRoadway = 'cyclistsOnRoadway',
    debris = 'debris',
    explosion = 'explosion',
    explosionHazard = 'explosionHazard',
    hazardsOnTheRoad = 'hazardsOnTheRoad',
    highSpeedChase = 'highSpeedChase',
    houseFire = 'houseFire',
    incident = 'incident',
    industrialAccident = 'industrialAccident',
    objectOnTheRoad = 'objectOnTheRoad',
    objectsFallingFromMovingVehicle = 'objectsFallingFromMovingVehicle',
    obstructionOnTheRoad = 'obstructionOnTheRoad',
    peopleOnRoadway = 'peopleOnRoadway',
    railCrash = 'railCrash',
    recklessDriver = 'recklessDriver',
    rescueAndRecoveryWork = 'rescueAndRecoveryWork',
    severeFrostDamagedRoadway = 'severeFrostDamagedRoadway',
    shedLoad = 'shedLoad',
    snowAndIceDebris = 'snowAndIceDebris',
    spillageOccurringFromMovingVehicle = 'spillageOccurringFromMovingVehicle',
    spillageOnTheRoad = 'spillageOnTheRoad',
    unprotectedAccidentArea = 'unprotectedAccidentArea',
    other = 'other',
}

// OccupancyChangeValue ...
export class OccupancyChangeValue extends DataValue {
    OccupancyChange: number
    OccupancyChangeValueExtension: _ExtensionType
}

// OccupancyDetectionTypeEnum ...
export enum OccupancyDetectionTypeEnum {
    none = 'none',
    balancing = 'balancing',
    singleSpaceDetection = 'singleSpaceDetection',
    modelBased = 'modelBased',
    manual = 'manual',
    unspecified = 'unspecified',
    other = 'other',
    unknown = 'unknown',
}

// OffsetDistance ...
export class OffsetDistance {
    OffsetDistance: number
    OffsetDistanceExtension: _ExtensionType
}

// OpeningStatusEnum ...
export enum OpeningStatusEnum {
    open = 'open',
    closed = 'closed',
    closedAbnormal = 'closedAbnormal',
    openingTimesInForce = 'openingTimesInForce',
    statusUnknown = 'statusUnknown',
    other = 'other',
}

// OpeningTimes ...
export class OpeningTimes {
    LastUpdated: string
    OpenAllYear: boolean
    Available24hours: boolean
    UrlLinkAddress: string
    OpeningTimesUnknown: boolean
    OpeningTimesNotSpecified: boolean
    Validity: Validity
    OpeningTimesExtension: _ExtensionType
}

// OpenlrAreaLocationReference ...
export class OpenlrAreaLocationReference {
    OpenlrAreaLocationReferenceExtension: _ExtensionType
}

// OpenlrBaseLocationReferencePoint ...
export class OpenlrBaseLocationReferencePoint {
    OpenlrCoordinate: PointCoordinates
    OpenlrLineAttributes: OpenlrLineAttributes
    OpenlrBaseLocationReferencePointExtension: _ExtensionType
}

// OpenlrBasePointLocation ...
export class OpenlrBasePointLocation {
    OpenlrSideOfRoad: string
    OpenlrOrientation: string
    OpenlrPositiveOffset: number
    OpenlrLocationReferencePoint: OpenlrLocationReferencePoint
    OpenlrLastLocationReferencePoint: OpenlrLastLocationReferencePoint
    OpenlrBasePointLocationExtension: _ExtensionType
}

// OpenlrCircleLocationReference ...
export class OpenlrCircleLocationReference extends OpenlrAreaLocationReference {
    Radius: number
    OpenlrGeoCoordinate: OpenlrGeoCoordinate
    OpenlrCircleLocationReferenceExtension: _ExtensionType
}

// OpenlrClosedLineLocationReference ...
export class OpenlrClosedLineLocationReference extends OpenlrAreaLocationReference {
    OpenlrLocationReferencePoint: Array<OpenlrLocationReferencePoint>
    OpenlrLastLine: OpenlrLineAttributes
    OpenlrClosedLineLocationReferenceExtension: _ExtensionType
}

// OpenlrExtendedArea ...
export class OpenlrExtendedArea {
    OpenlrAreaLocationReference: OpenlrAreaLocationReference
}

// OpenlrExtendedLinear ...
export class OpenlrExtendedLinear {
    FirstDirection: OpenlrLineLocationReference
    OppositeDirection: OpenlrLineLocationReference
}

// OpenlrExtendedPoint ...
export class OpenlrExtendedPoint {
    OpenlrPointLocationReference: OpenlrPointLocationReference
}

// OpenlrFormOfWayEnum ...
export enum OpenlrFormOfWayEnum {
    undefined = 'undefined',
    motorway = 'motorway',
    multipleCarriageway = 'multipleCarriageway',
    singleCarriageway = 'singleCarriageway',
    roundabout = 'roundabout',
    slipRoad = 'slipRoad',
    trafficSquare = 'trafficSquare',
    other = 'other',
}

// OpenlrFunctionalRoadClassEnum ...
export enum OpenlrFunctionalRoadClassEnum {
    FRC0 = 'FRC0',
    FRC1 = 'FRC1',
    FRC2 = 'FRC2',
    FRC3 = 'FRC3',
    FRC4 = 'FRC4',
    FRC5 = 'FRC5',
    FRC6 = 'FRC6',
    FRC7 = 'FRC7',
}

// OpenlrGeoCoordinate ...
export class OpenlrGeoCoordinate {
    OpenlrCoordinate: PointCoordinates
    OpenlrGeoCoordinateExtension: _ExtensionType
}

// OpenlrGridAttributes ...
export class OpenlrGridAttributes {
    OpenlrNumColumns: number
    OpenlrNumRows: number
    OpenlrGridAttributesExtension: _ExtensionType
}

// OpenlrGridLocationReference ...
export class OpenlrGridLocationReference extends OpenlrAreaLocationReference {
    OpenlrRectangle: OpenlrRectangle
    OpenlrGridAttributes: OpenlrGridAttributes
    OpenlrGridLocationReferenceExtension: _ExtensionType
}

// OpenlrLastLocationReferencePoint ...
export class OpenlrLastLocationReferencePoint extends OpenlrBaseLocationReferencePoint {
    OpenlrLastLocationReferencePointExtension: _ExtensionType
}

// OpenlrLineAttributes ...
export class OpenlrLineAttributes {
    OpenlrFunctionalRoadClass: string
    OpenlrFormOfWay: string
    OpenlrBearing: number
    OpenlrLineAttributesExtension: _ExtensionType
}

// OpenlrLineLocationReference ...
export class OpenlrLineLocationReference {
    OpenlrLocationReferencePoint: Array<OpenlrLocationReferencePoint>
    OpenlrLastLocationReferencePoint: OpenlrLastLocationReferencePoint
    OpenlrOffsets: OpenlrOffsets
    OpenlrLineLocationReferenceExtension: _ExtensionType
}

// OpenlrLocationReferencePoint ...
export class OpenlrLocationReferencePoint extends OpenlrBaseLocationReferencePoint {
    OpenlrPathAttributes: OpenlrPathAttributes
    OpenlrLocationReferencePointExtension: _ExtensionType
}

// OpenlrOffsets ...
export class OpenlrOffsets {
    OpenlrPositiveOffset: number
    OpenlrNegativeOffset: number
    OpenlrOffsetsExtension: _ExtensionType
}

// OpenlrOrientationEnum ...
export enum OpenlrOrientationEnum {
    noOrientationOrUnknown = 'noOrientationOrUnknown',
    withLineDirection = 'withLineDirection',
    againstLineDirection = 'againstLineDirection',
    both = 'both',
}

// OpenlrPathAttributes ...
export class OpenlrPathAttributes {
    OpenlrLowestFRCToNextLRPoint: string
    OpenlrDistanceToNextLRPoint: number
    OpenlrPathAttributesExtension: _ExtensionType
}

// OpenlrPointAlongLine ...
export class OpenlrPointAlongLine extends OpenlrBasePointLocation {
    OpenlrPointAlongLineExtension: _ExtensionType
}

// OpenlrPointLocationReference ...
export class OpenlrPointLocationReference {
    OpenlrGeoCoordinate: OpenlrGeoCoordinate
    OpenlrPoiWithAccessPoint: OpenlrPoiWithAccessPoint
    OpenlrPointAlongLine: OpenlrPointAlongLine
    OpenlrPointLocationReferenceExtension: _ExtensionType
}

// OpenlrPoiWithAccessPoint ...
export class OpenlrPoiWithAccessPoint extends OpenlrBasePointLocation {
    OpenlrCoordinate: PointCoordinates
    OpenlrPoiWithAccessPointExtension: _ExtensionType
}

// OpenlrPolygonCorners ...
export class OpenlrPolygonCorners {
    OpenlrCoordinate: Array<PointCoordinates>
    OpenlrPolygonCornersExtension: _ExtensionType
}

// OpenlrPolygonLocationReference ...
export class OpenlrPolygonLocationReference extends OpenlrAreaLocationReference {
    OpenlrPolygonCorners: OpenlrPolygonCorners
    OpenlrPolygonLocationReferenceExtension: _ExtensionType
}

// OpenlrRectangle ...
export class OpenlrRectangle {
    OpenlrLowerLeft: PointCoordinates
    OpenlrUpperRight: PointCoordinates
    OpenlrRectangleExtension: _ExtensionType
}

// OpenlrRectangleLocationReference ...
export class OpenlrRectangleLocationReference extends OpenlrAreaLocationReference {
    OpenlrRectangle: OpenlrRectangle
    OpenlrRectangleLocationReferenceExtension: _ExtensionType
}

// OpenlrSideOfRoadEnum ...
export enum OpenlrSideOfRoadEnum {
    onRoadOrUnknown = 'onRoadOrUnknown',
    right = 'right',
    left = 'left',
    both = 'both',
}

// OperatingModeEnum ...
export enum OperatingModeEnum {
    operatingMode0 = 'operatingMode0',
    operatingMode1 = 'operatingMode1',
    operatingMode2 = 'operatingMode2',
    operatingMode3 = 'operatingMode3',
}

// OperationStatusEnum ...
export enum OperationStatusEnum {
    inOperation = 'inOperation',
    limitedOperation = 'limitedOperation',
    notInOperation = 'notInOperation',
    notInOperationAbnormal = 'notInOperationAbnormal',
    technicalDefect = 'technicalDefect',
    unknown = 'unknown',
}

// OperatorAction ...
export class OperatorAction extends SituationRecord {
    ActionOrigin: string
    ActionPlanIdentifier: string
    OperatorActionStatus: string
    OperatorActionExtension: _ExtensionType
}

// OperatorActionOriginEnum ...
export enum OperatorActionOriginEnum {
    external = 'external',
    internal = 'internal',
}

// OperatorActionStatusEnum ...
export enum OperatorActionStatusEnum {
    requested = 'requested',
    approved = 'approved',
    beingImplemented = 'beingImplemented',
    implemented = 'implemented',
    rejected = 'rejected',
    terminationRequested = 'terminationRequested',
    beingTerminated = 'beingTerminated',
}

// OverallPeriod ...
export class OverallPeriod {
    OverallStartTime: string
    OverallEndTime: string
    ValidPeriod: Array<Period>
    ExceptionPeriod: Array<Period>
    OverallPeriodExtension: _ExtensionType
}

// OwnershipTypeEnum ...
export enum OwnershipTypeEnum {
    public = 'public',
    private = 'private',
    publicPrivate = 'publicPrivate',
    resident = 'resident',
    unknown = 'unknown',
    other = 'other',
}

// ParkingAccess ...
export class ParkingAccess {
    IdAttr: string
    AccessCategory: string
    AccessName: MultilingualString
    AccessEquipment: string
    Accessibility: string
    PhotoUrl: string
    AccessOnlyAssignedFor: ParkingAssignment
    AccessAssignedAmongOthers: ParkingAssignment
    AccessProhibitedFor: ParkingAssignment
    PrimaryRoad: Array<Road>
    Location: Location
    OpeningTimes: OpeningTimes
    ParkingAccessExtension: _ExtensionType
}

// ParkingAccessStatus ...
export class ParkingAccessStatus {
    AccessReference: _ParkingAccessReference
    AccessOpeningStatus: string
    AccessFault: string
    ParkingAccessStatusExtension: _ExtensionType
}

// ParkingAssignment ...
export class ParkingAssignment {
    ApplicableForUser: string
    ParkingDuration: string
    VehicleCharacteristics: Array<VehicleCharacteristics>
    HazardousMaterials: Array<HazardousMaterials>
    TimePeriodByHour: Array<TimePeriodByHour>
    ParkingPermit: Array<ParkingPermit>
    ParkingAssignmentExtension: _ExtensionType
}

// ParkingConditionsEnum ...
export enum ParkingConditionsEnum {
    normalParkingConditionsSuspended = 'normalParkingConditionsSuspended',
    specialParkingConditionsInForce = 'specialParkingConditionsInForce',
    other = 'other',
}

// ParkingDurationEnum ...
export enum ParkingDurationEnum {
    pickUpDropOff = 'pickUpDropOff',
    shortTerm = 'shortTerm',
    shortTerm24hours = 'shortTerm24hours',
    shortTerm48hours = 'shortTerm48hours',
    shortTerm72hours = 'shortTerm72hours',
    shortTerm96hours = 'shortTerm96hours',
    longTerm = 'longTerm',
    unknown = 'unknown',
    other = 'other',
}

// ParkingEquipmentOrServiceFacility ...
export class ParkingEquipmentOrServiceFacility {
    EquipmentOrServiceFacilityIdentifier: string
    Availability: string
    NumberOfEquipmentOrServiceFacility: number
    AdditionalDescription: MultilingualString
    OtherEquipmentOrServiceFacility: MultilingualString
    Accessibility: string
    NameOrBrand: MultilingualString
    Comment: MultilingualString
    PhotoUrl: string
    ApplicableForUser: string
    AvailabilityAndOpeningTimes: OpeningTimes
    TariffsAndPayment: TariffsAndPayment
    GroupOfLocations: GroupOfLocations
    ApplicableForVehicles: Array<VehicleCharacteristics>
    ParkingEquipmentOrServiceFacilityExtension: _ExtensionType
}

// ParkingEquipmentOrServiceFacilityStatus ...
export class ParkingEquipmentOrServiceFacilityStatus {
    NumberOfEquipmentOrServiceFacilityOverride: number
    NumberOfSubitemsOverride: number
    VacantEquipmentOrServiceFacilitySubitems: number
    ServiceFacilityOpeningStatus: string
    EquipmentOperationStatus: string
    ParkingEquipmentOrServiceFacilityStatusExtension: _ExtensionType
}

// ParkingFaultEnum ...
export enum ParkingFaultEnum {
    communicationsFailure = 'communicationsFailure',
    barrierMalfunction = 'barrierMalfunction',
    entranceExitObstructed = 'entranceExitObstructed',
    erroneousOccupancyInformation = 'erroneousOccupancyInformation',
    erroneousOccupancyDisplayed = 'erroneousOccupancyDisplayed',
    paymentMachinesInoperative = 'paymentMachinesInoperative',
    reservationServiceOutOfOrder = 'reservationServiceOutOfOrder',
    noParkingInformationAvailable = 'noParkingInformationAvailable',
    unspecified = 'unspecified',
    unknown = 'unknown',
    other = 'other',
}

// ParkingLayoutEnum ...
export enum ParkingLayoutEnum {
    multiStorey = 'multiStorey',
    singleLevel = 'singleLevel',
    underground = 'underground',
    undergroundAndMultistorey = 'undergroundAndMultistorey',
    automatedParkingGarage = 'automatedParkingGarage',
    openSpace = 'openSpace',
    covered = 'covered',
    nested = 'nested',
    field = 'field',
    unknown = 'unknown',
    other = 'other',
}

// ParkingModeEnum ...
export enum ParkingModeEnum {
    perpendicularParking = 'perpendicularParking',
    parallelParking = 'parallelParking',
    echelonParking = 'echelonParking',
    parkingOnOppositeSideOfRoad = 'parkingOnOppositeSideOfRoad',
    other = 'other',
}

// ParkingOccupancy ...
export class ParkingOccupancy {
    ParkingNumberOfSpacesOverride: number
    ParkingNumberOfVacantSpaces: number
    ParkingNumberOfVacantSpacesLowerThan: number
    ParkingNumberOfVacantSpacesHigherThan: number
    ParkingNumberOfVacantSpacesGraded: string
    ParkingNumberOfOccupiedSpaces: number
    ParkingNumberOfVehicles: number
    ParkingOccupancy: number
    ParkingOccupancyGraded: string
    ParkingOccupancyTrend: string
    ParkingNotAllowed: boolean
    VehicleCountAndRate: Array<VehicleCountAndRate>
    ParkingOccupancyExtension: _ExtensionType
}

// ParkingOccupancyEnum ...
export enum ParkingOccupancyEnum {
    expectCarParkToBeFull = 'expectCarParkToBeFull',
    percentage10 = 'percentage10',
    percentage20 = 'percentage20',
    percentage30 = 'percentage30',
    percentage40 = 'percentage40',
    percentage50 = 'percentage50',
    percentage60 = 'percentage60',
    percentage70 = 'percentage70',
    percentage80 = 'percentage80',
    percentage90 = 'percentage90',
    full = 'full',
    unknown = 'unknown',
}

// ParkingOccupancyTrendEnum ...
export enum ParkingOccupancyTrendEnum {
    decreasing = 'decreasing',
    increasing = 'increasing',
    stable = 'stable',
    increasingQuickly = 'increasingQuickly',
    increasingSlowly = 'increasingSlowly',
    decreasingQuickly = 'decreasingQuickly',
    decreasingSlowly = 'decreasingSlowly',
    unknown = 'unknown',
    other = 'other',
}

// ParkingPaymentModeEnum ...
export enum ParkingPaymentModeEnum {
    payAndDisplay = 'payAndDisplay',
    payManualAtExitBooth = 'payManualAtExitBooth',
    payPriorToExit = 'payPriorToExit',
    payByPrepaidToken = 'payByPrepaidToken',
    payAndExit = 'payAndExit',
    other = 'other',
}

// ParkingPermit ...
export class ParkingPermit {
    ParkingPermitType: string
    ParkingPermitScheme: string
    ParkingPermitIdentifier: string
    ParkingPermitExtension: _ExtensionType
}

// ParkingRecord ...
export class ParkingRecord {
    IdAttr: string
    VersionAttr: string
    ParkingName: MultilingualString
    ParkingAlias: Array<MultilingualString>
    ParkingDescription: MultilingualString
    ParkingRecordVersionTime: string
    ParkingNumberOfSpaces: number
    ParkingPrincipalNumberOfSpaces: number
    MaximumParkingDuration: number
    PhotoUrl: string
    UrlLinkAddress: string
    ParkingOccupanyDetectionType: string
    EmergencyContact: Array<Contact>
    Owner: Array<Contact>
    ResponisbleAuthority: Array<Contact>
    SecurityService: Array<Contact>
    Operator: Array<Contact>
    ServicePartner: Array<Contact>
    ParkingVMS: Array<ParkingVMS>
    ParkingLocation: GroupOfLocations
    ParkingRoute: Array<ParkingRoute>
    ParkingColour: RGBColour
    OnlyAssignedParking: ParkingAssignment
    AssignedParkingAmongOthers: ParkingAssignment
    ProhibitedParking: ParkingAssignment
    TariffsAndPayment: TariffsAndPayment
    ParkingEquipmentOrServiceFacility: Array<_ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility>
    ParkingSpace: Array<_ParkingSpace>
    GroupOfParkingSpaces: Array<_GroupOfParkingSpaces>
    ParkingThresholds: ParkingThresholds
    PermitsAndProhibitions: Array<PermitsAndProhibitions>
    EmergencyAssemblyPoint: GroupOfLocations
    EntireArea: Area
    ParkingRecordDimension: Dimension
    ParkingRecordExtension: _ExtensionType
}

// ParkingRecordStatus ...
export class ParkingRecordStatus {
    ParkingRecordReference: _ParkingRecordVersionedReference
    ParkingStatusOriginTime: string
    ParkingStatusDescription: MultilingualString
    ParkingQueueingTime: number
    ParkingConditions: string
    BlurredAvailability: boolean
    ParkingFault: string
    WinterEquipmentManagementType: string
    ParkingSpaceStatus: Array<_ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus>
    ParkingOccupancy: ParkingOccupancy
    GroupOfParkingSpacesStatus: Array<_ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus>
    ParkingStatusValidity: ParkingStatusValidity
    OverrideParkingThresholds: ParkingThresholds
    ParkingEquipmentOrServiceFacilityStatus: Array<_ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus>
    ParkingUsageScenarioStatus: Array<_ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus>
    ParkingAccessStatus: Array<ParkingAccessStatus>
    ParkingRouteStatus: Array<ParkingRouteStatus>
    ParkingRecordStatusExtension: _ExtensionType
}

// ParkingRoute ...
export class ParkingRoute {
    ParkingRouteColour: RGBColour
    ParkingRouteExtension: _ExtensionType
}

// ParkingRouteByReference ...
export class ParkingRouteByReference extends ParkingRoute {
    ParkingRouteReference: _ParkingRouteDetailsVersionedReference
    ParkingRouteByReferenceExtension: _ExtensionType
}

// ParkingRouteDetails ...
export class ParkingRouteDetails extends ParkingRoute {
    IdAttr: string
    VersionAttr: string
    ParkingRouteName: MultilingualString
    ParkingRouteType: string
    DynamicRouteManagement: boolean
    ParkingRouteIconIndex: string
    ParkingRouteDirection: string
    ParkingRouteDirection2: string
    GroupOfLocations: GroupOfLocations
    ParkingRouteDetailsExtension: _ExtensionType
}

// ParkingRouteDirectionEnum ...
export enum ParkingRouteDirectionEnum {
    towardsParkingSite = 'towardsParkingSite',
    awayFromParkingSite = 'awayFromParkingSite',
}

// ParkingRouteStatus ...
export class ParkingRouteStatus {
    ParkingRouteReference: _ParkingRouteDetailsVersionedReference
    ParkingRouteActive: boolean
    ParkingRouteStatusExtension: _ExtensionType
}

// ParkingRouteTypeEnum ...
export enum ParkingRouteTypeEnum {
    pedestrian = 'pedestrian',
    bicycle = 'bicycle',
    lorry = 'lorry',
    other = 'other',
}

// ParkingSecurityEnum ...
export enum ParkingSecurityEnum {
    socialControl = 'socialControl',
    securityStaff = 'securityStaff',
    externalSecurity = 'externalSecurity',
    cctv = 'cctv',
    dog = 'dog',
    guard24hours = 'guard24hours',
    lighting = 'lighting',
    floodLight = 'floodLight',
    fences = 'fences',
    areaSeperatedFromSurroundings = 'areaSeperatedFromSurroundings',
    none = 'none',
    unknown = 'unknown',
    other = 'other',
}

// ParkingSite ...
export class ParkingSite extends ParkingRecord {
    ParkingReservation: string
    ParkingLayout: string
    HighestFloor: number
    LowestFloor: number
    TemporaryParking: boolean
    ParkingSiteAddress: Array<Contact>
    ReservationService: Array<Contact>
    ParkingUsageScenario: Array<_ParkingSiteScenarioIndexParkingUsageScenario>
    OpeningTimes: OpeningTimes
    ParkingAccess: Array<ParkingAccess>
    ParkingStandardsAndSecurity: ParkingStandardsAndSecurity
    ParkingSiteExtension: _ExtensionType
}

// ParkingSiteOvercrowdingStatusEnum ...
export enum ParkingSiteOvercrowdingStatusEnum {
    overcrowding = 'overcrowding',
    noOvercrowding = 'noOvercrowding',
    overcrowdingLevel1 = 'overcrowdingLevel1',
    overcrowdingLevel2 = 'overcrowdingLevel2',
    unknown = 'unknown',
    other = 'other',
}

// ParkingSiteStatus ...
export class ParkingSiteStatus extends ParkingRecordStatus {
    ParkingSiteStatus: string
    ParkingSiteOpeningStatus: string
    ParkingSiteOvercrowdingStatus: string
    ParkingSiteFullAtFloor: number
    ParkingSiteStatusExtension: _ExtensionType
}

// ParkingSiteStatusEnum ...
export enum ParkingSiteStatusEnum {
    spacesAvailable = 'spacesAvailable',
    almostFull = 'almostFull',
    fullAtEntrance = 'fullAtEntrance',
    full = 'full',
    unknown = 'unknown',
    other = 'other',
}

// ParkingSpace ...
export class ParkingSpace extends ParkingSpaceBasics {
    IdenticalToParkingSpace: string
    Location: Location
    ParkingSpaceDimension: Dimension
    ParkingSpaceExtension: _ExtensionType
}

// ParkingSpaceAccessibilityEnum ...
export enum ParkingSpaceAccessibilityEnum {
    extraSpaceLeftSide = 'extraSpaceLeftSide',
    extraSpaceRightSide = 'extraSpaceRightSide',
    nearbyPedestrianExit = 'nearbyPedestrianExit',
    bordersMarked = 'bordersMarked',
    other = 'other',
}

// ParkingSpaceBasics ...
export class ParkingSpaceBasics {
    ParkingSpaceOrGroupIdentifier: MultilingualString
    ParkingFloorOrLevel: number
    Accessibility: string
    ParkingSpaceAccessibility: string
    ParkingSpacePhysics: string
    ParkingMode: string
    ParkingReservation: string
    MaximumParkingDuration: number
    DistanceFromPrimaryRoad: number
    ParkingOccupanyDetectionType: string
    ParkingSecurity: string
    DedicatedAccess: Array<DedicatedAccess>
    OnlyAssignedParking: ParkingAssignment
    AssignedParkingAmongOthers: ParkingAssignment
    ProhibitedParking: ParkingAssignment
    ParkingEquipmentOrServiceFacility: Array<_ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility>
    ParkingUsageScenario: Array<_ParkingSpaceBasicsScenarioIndexParkingUsageScenario>
    ParkingSpaceBasicsExtension: _ExtensionType
}

// ParkingSpacePhysicsEnum ...
export enum ParkingSpacePhysicsEnum {
    driveThrough = 'driveThrough',
    openAir = 'openAir',
}

// ParkingSpaceStatus ...
export class ParkingSpaceStatus {
    ParkingSpaceOccupied: boolean
    ParkingSpaceClosed: boolean
    ParkingSpaceDeclarationValidNow: boolean
    MeasurementOrCalculationTime: string
    LastCalibration: string
    ParkingSpaceStatusExtension: _ExtensionType
}

// ParkingSpecialLocationEnum ...
export enum ParkingSpecialLocationEnum {
    airportTerminal = 'airportTerminal',
    exhibitonCentre = 'exhibitonCentre',
    shoppingCentre = 'shoppingCentre',
    specificFacility = 'specificFacility',
    trainStation = 'trainStation',
    campground = 'campground',
    themePark = 'themePark',
    ferryTerminal = 'ferryTerminal',
    vehicleOnRailTerminal = 'vehicleOnRailTerminal',
    coachStation = 'coachStation',
    cableCarStation = 'cableCarStation',
    publicTransportStation = 'publicTransportStation',
    market = 'market',
    religiousCentre = 'religiousCentre',
    conventionCentre = 'conventionCentre',
    cinema = 'cinema',
    skilift = 'skilift',
    unknown = 'unknown',
    other = 'other',
}

// ParkingStandardsAndSecurity ...
export class ParkingStandardsAndSecurity {
    LabelSecurityLevel: string
    LabelServiceLevel: string
    LabelSecurityLevelSelfAssessment: string
    LabelServiceLevelSelfAssessment: string
    ParkingSecurity: string
    ParkingAdditionalSecurity: Array<MultilingualString>
    ParkingSupervision: string
    ParkingSecurityNationalClassification: MultilingualString
    CertifiedSecureParking: boolean
    DateOfCertification: string
    ParkingStandardsAndSecurityExtension: _ExtensionType
}

// ParkingStatusColourMapping ...
export class ParkingStatusColourMapping {
    ParkingSiteStatus: string
    RgbColour: RGBColour
    ParkingStatusColourMappingExtension: _ExtensionType
}

// ParkingStatusPublication ...
export class ParkingStatusPublication {
    ParkingTableReference: Array<_ParkingTableVersionedReference>
    HeaderInformation: HeaderInformation
    ParkingRecordStatus: Array<ParkingRecordStatus>
}

// ParkingStatusValidity ...
export class ParkingStatusValidity {
    ParkingStatusTime: string
    ParkingStatusTimeOffsetToOrigin: number
    ValidityTimeSpecification: OverallPeriod
    ParkingStatusValidityExtension: _ExtensionType
}

// ParkingSupervisionEnum ...
export enum ParkingSupervisionEnum {
    remote = 'remote',
    onSite = 'onSite',
    controlCentreOnSite = 'controlCentreOnSite',
    controlCentreOffSite = 'controlCentreOffSite',
    patrol = 'patrol',
    none = 'none',
    unknown = 'unknown',
    other = 'other',
}

// ParkingTable ...
export class ParkingTable {
    IdAttr: string
    VersionAttr: string
    ParkingTableName: MultilingualString
    ParkingTableVersionTime: string
    ParkingRecord: Array<ParkingRecord>
    ParkingTableExtension: _ExtensionType
}

// ParkingTablePublication ...
export class ParkingTablePublication {
    HeaderInformation: HeaderInformation
    ParkingTable: Array<ParkingTable>
}

// ParkingThresholds ...
export class ParkingThresholds {
    AlmostFullDecreasing: number
    AlmostFullIncreasing: number
    EntranceFull: number
    FullDecreasing: number
    FullIncreasing: number
    Overcrowding: number
    OvercrowdingLevel1: number
    OvercrowdingLevel2: number
    ParkingLastMaximumOccupancy: number
    ParkingStatusColourMapping: Array<ParkingStatusColourMapping>
    ParkingThresholdsExtension: _ExtensionType
}

// ParkingTypeOfGroup ...
export enum ParkingTypeOfGroup {
    adjacentSpaces = 'adjacentSpaces',
    nonAdjacentSpaces = 'nonAdjacentSpaces',
    completeFloor = 'completeFloor',
    mixedUsage = 'mixedUsage',
    statisticsOnly = 'statisticsOnly',
    singleParameters = 'singleParameters',
    other = 'other',
}

// ParkingUsageScenario ...
export class ParkingUsageScenario {
    ParkingUsageScenario: string
    TruckParkingDynamicManagement: string
    EventParkingType: string
    EventParkingType2: string
    ScenarioAvailability: OverallPeriod
    ParkingUsageScenarioExtension: _ExtensionType
}

// ParkingUsageScenarioEnum ...
export enum ParkingUsageScenarioEnum {
    truckParking = 'truckParking',
    parkAndRide = 'parkAndRide',
    parkAndCycle = 'parkAndCycle',
    parkAndWalk = 'parkAndWalk',
    kissAndRide = 'kissAndRide',
    liftshare = 'liftshare',
    carSharing = 'carSharing',
    restArea = 'restArea',
    serviceArea = 'serviceArea',
    dropOffWithValet = 'dropOffWithValet',
    dropOffMechanical = 'dropOffMechanical',
    eventParking = 'eventParking',
    automaticParkingGuidance = 'automaticParkingGuidance',
    staffGuidesToSpace = 'staffGuidesToSpace',
    vehicleLift = 'vehicleLift',
    loadingBay = 'loadingBay',
    dropOff = 'dropOff',
    overnightParking = 'overnightParking',
    unknown = 'unknown',
    other = 'other',
}

// ParkingUsageScenarioStatus ...
export class ParkingUsageScenarioStatus {
    UsageScenarioOperationStatus: string
    ParkingUsageScenarioStatusExtension: _ExtensionType
}

// ParkingVacantSpacesEnum ...
export enum ParkingVacantSpacesEnum {
    noParkingSpacesAvailable = 'noParkingSpacesAvailable',
    expectNoSpacesAvailable = 'expectNoSpacesAvailable',
    onlyAFewSpacesAvailable = 'onlyAFewSpacesAvailable',
    lessThan10SpacesAvailable = 'lessThan10SpacesAvailable',
    lessThan20SpacesAvailable = 'lessThan20SpacesAvailable',
    lessThan30SpacesAvailable = 'lessThan30SpacesAvailable',
    lessThan40SpacesAvailable = 'lessThan40SpacesAvailable',
    lessThan50SpacesAvailable = 'lessThan50SpacesAvailable',
    unknown = 'unknown',
    other = 'other',
}

// ParkingVehicle ...
export class ParkingVehicle {
    IdAttr: string
    VersionAttr: string
    ParkingRecordReference: _ParkingRecordVersionedReference
    ParkingSpaceReference: string
    GroupOfParkingSpacesReference: string
    ParkingPermit: Array<ParkingPermit>
    Vehicle: Vehicle
    IndividualCharge: IndividualCharge
    ParkingPeriod: OverallPeriod
    ParkingVehicleExtension: _ExtensionType
}

// ParkingVehiclesPublication ...
export class ParkingVehiclesPublication {
    ParkingTableReference: Array<_ParkingTableVersionedReference>
    ParkingVehicle: Array<ParkingVehicle>
}

// ParkingVMS ...
export class ParkingVMS {
    VmsUnitUsedToManageParking: _VmsUnitRecordVersionedReference
    VmsOperator: Array<Contact>
    ParkingVMSExtension: _ExtensionType
}

// PassengerCarUnitsPerHour ...
export type PassengerCarUnitsPerHour = number

// PayloadPublication ...
export class PayloadPublication {
    LangAttr: string
    FeedDescription: MultilingualString
    FeedType: string
    PublicationTime: string
    PublicationCreator: InternationalIdentifier
    PayloadPublicationExtension: _ExtensionType
}

// PaymentCardBrandsEnum ...
export enum PaymentCardBrandsEnum {
    americanExpress = 'americanExpress',
    cirrus = 'cirrus',
    dinersClub = 'dinersClub',
    discoverCard = 'discoverCard',
    giroCard = 'giroCard',
    maestro = 'maestro',
    masterCard = 'masterCard',
    visa = 'visa',
    vPay = 'vPay',
    other = 'other',
}

// PaymentCardTypesEnum ...
export enum PaymentCardTypesEnum {
    creditCard = 'creditCard',
    debitCard = 'debitCard',
    chargeCard = 'chargeCard',
    fleetCard = 'fleetCard',
    storedValueCard = 'storedValueCard',
    other = 'other',
}

// PcuFlowValue ...
export class PcuFlowValue extends DataValue {
    PcuFlowRate: number
    PcuFlowValueExtension: _ExtensionType
}

// Percentage ...
export type Percentage = number

// PercentageDistanceAlongLinearElement ...
export class PercentageDistanceAlongLinearElement extends DistanceAlongLinearElement {
    PercentageDistanceAlong: number
    PercentageDistanceAlongLinearElementExtension: _ExtensionType
}

// PercentageValue ...
export class PercentageValue extends DataValue {
    Percentage: number
    PercentageValueExtension: _ExtensionType
}

// Period ...
export class Period {
    StartOfPeriod: string
    EndOfPeriod: string
    PeriodName: MultilingualString
    RecurringTimePeriodOfDay: Array<TimePeriodOfDay>
    RecurringDayWeekMonthPeriod: Array<DayWeekMonth>
    PeriodExtension: _PeriodExtensionType
}

// PeriodExtended ...
export class PeriodExtended {
    RecurringSpecialDay: Array<SpecialDay>
}

// PermitsAndProhibitions ...
export class PermitsAndProhibitions {
    Activity: string
    Regulation: string
    PermitsAndProhibitionsExtension: _ExtensionType
}

// PermitTypeEnum ...
export enum PermitTypeEnum {
    blueZonePermit = 'blueZonePermit',
    careTakingPermit = 'careTakingPermit',
    carpoolingPermit = 'carpoolingPermit',
    carSharingPermit = 'carSharingPermit',
    disabledPermit = 'disabledPermit',
    emergencyVehiclePermit = 'emergencyVehiclePermit',
    employeePermit = 'employeePermit',
    fairPermit = 'fairPermit',
    governmentPermit = 'governmentPermit',
    maintenanceVehiclePermit = 'maintenanceVehiclePermit',
    residentPermit = 'residentPermit',
    roadWorksPermit = 'roadWorksPermit',
    specificIdentifiedVehiclePermit = 'specificIdentifiedVehiclePermit',
    taxiPermit = 'taxiPermit',
    other = 'other',
}

// PersonCategoryEnum ...
export enum PersonCategoryEnum {
    adult = 'adult',
    child = 'child',
    emergencyServicesPerson = 'emergencyServicesPerson',
    fireman = 'fireman',
    infant = 'infant',
    medicalStaff = 'medicalStaff',
    memberOfThePublic = 'memberOfThePublic',
    policeman = 'policeman',
    politician = 'politician',
    publicTransportPassenger = 'publicTransportPassenger',
    sickPerson = 'sickPerson',
    trafficOfficer = 'trafficOfficer',
    trafficWarden = 'trafficWarden',
    veryImportantPerson = 'veryImportantPerson',
}

// PhysicalMountingEnum ...
export enum PhysicalMountingEnum {
    centralReservationMounted = 'centralReservationMounted',
    gantryMounted = 'gantryMounted',
    overheadBridgeMounted = 'overheadBridgeMounted',
    roadsideCantileverMounted = 'roadsideCantileverMounted',
    roadsideMounted = 'roadsideMounted',
    trailerMounted = 'trailerMounted',
    tunnelEntranceMounted = 'tunnelEntranceMounted',
    vehicleMounted = 'vehicleMounted',
}

// PictogramDisplayAreaSettings ...
export class PictogramDisplayAreaSettings {
    PictogramLanternsOn: boolean
    PictogramLuminanceOverride: boolean
    PictogramLuminanceLevel: number
    PictogramLuminanceLevelName: string
    PictogramDisplayAreaSettingsExtension: _ExtensionType
}

// PlacesEnum ...
export enum PlacesEnum {
    aroundBendsInTheRoad = 'aroundBendsInTheRoad',
    atCustomsPosts = 'atCustomsPosts',
    atHighAltitudes = 'atHighAltitudes',
    atTollPlazas = 'atTollPlazas',
    inBuiltUpAreas = 'inBuiltUpAreas',
    inContraflowSections = 'inContraflowSections',
    inForestedAreas = 'inForestedAreas',
    inGalleries = 'inGalleries',
    inLowLyingAreas = 'inLowLyingAreas',
    inRoadworksAreas = 'inRoadworksAreas',
    inRuralAreas = 'inRuralAreas',
    inShadedAreas = 'inShadedAreas',
    inTheCityCentre = 'inTheCityCentre',
    inTheInnerCityAreas = 'inTheInnerCityAreas',
    inTunnels = 'inTunnels',
    onBridges = 'onBridges',
    onDownHillSections = 'onDownHillSections',
    onDualCarriagewaySections = 'onDualCarriagewaySections',
    onElevatedSections = 'onElevatedSections',
    onEnteringOrLeavingTunnels = 'onEnteringOrLeavingTunnels',
    onEnteringTheCountry = 'onEnteringTheCountry',
    onFlyovers = 'onFlyovers',
    onLeavingTheCountry = 'onLeavingTheCountry',
    onMotorways = 'onMotorways',
    onNonMotorways = 'onNonMotorways',
    onPasses = 'onPasses',
    onRoundabouts = 'onRoundabouts',
    onSingleCarriagewaySections = 'onSingleCarriagewaySections',
    onSlipRoads = 'onSlipRoads',
    onUndergroundSections = 'onUndergroundSections',
    onUnderpasses = 'onUnderpasses',
    onUpHillSections = 'onUpHillSections',
    overTheCrestOfHills = 'overTheCrestOfHills',
    other = 'other',
}

// Point ...
export class Point extends NetworkLocation {
    TpegPointLocation: TpegPointLocation
    AlertCPoint: AlertCPoint
    PointAlongLinearElement: PointAlongLinearElement
    PointByCoordinates: PointByCoordinates
    PointExtension: _PointExtensionType
}

// PointAlongLinearElement ...
export class PointAlongLinearElement {
    AdministrativeAreaOfPoint: MultilingualString
    DirectionBoundAtPoint: string
    DirectionRelativeAtPoint: string
    HeightGradeOfPoint: string
    LinearElement: LinearElement
    DistanceAlongLinearElement: DistanceAlongLinearElement
    PointAlongLinearElementExtension: _ExtensionType
}

// PointByCoordinates ...
export class PointByCoordinates {
    Bearing: number
    PointCoordinates: PointCoordinates
    PointByCoordinatesExtension: _ExtensionType
}

// PointCoordinates ...
export class PointCoordinates {
    Latitude: number
    Longitude: number
    PointCoordinatesExtension: _ExtensionType
}

// PointDestination ...
export class PointDestination extends Destination {
    Point: Point
    PointDestinationExtension: _ExtensionType
}

// PointExtended ...
export class PointExtended {
    Description: MultilingualString
    Junction: Junction
}

// PollutantTypeEnum ...
export enum PollutantTypeEnum {
    benzeneTolueneXylene = 'benzeneTolueneXylene',
    carbonMonoxide = 'carbonMonoxide',
    lead = 'lead',
    methane = 'methane',
    nitricOxide = 'nitricOxide',
    nitrogenDioxide = 'nitrogenDioxide',
    nitrogenMonoxide = 'nitrogenMonoxide',
    nitrogenOxides = 'nitrogenOxides',
    nonMethaneHydrocarbons = 'nonMethaneHydrocarbons',
    ozone = 'ozone',
    particulates10 = 'particulates10',
    polycyclicAromaticHydrocarbons = 'polycyclicAromaticHydrocarbons',
    primaryParticulate = 'primaryParticulate',
    sulphurDioxide = 'sulphurDioxide',
    totalHydrocarbons = 'totalHydrocarbons',
}

// Pollution ...
export class Pollution {
    PollutantType: string
    PollutantConcentration: MicrogramsConcentrationValue
    PollutionExtension: _ExtensionType
}

// PollutionInformation ...
export class PollutionInformation extends WeatherData {
    Pollution: Array<Pollution>
    PollutionInformationExtension: _ExtensionType
}

// PolygonArea ...
export class PolygonArea {
    SectionName: MultilingualString
    PointCoordinates: Array<_PolygonAreaIndexPointCoordinates>
    PolygonAreaExtension: _ExtensionType
}

// PoorEnvironmentConditions ...
export class PoorEnvironmentConditions extends Conditions {
    PoorEnvironmentType: string
    PrecipitationDetail: PrecipitationDetail
    Visibility: Visibility
    Pollution: Pollution
    Temperature: Temperature
    Wind: Wind
    Humidity: Humidity
    PoorEnvironmentConditionsExtension: _ExtensionType
}

// PoorEnvironmentTypeEnum ...
export enum PoorEnvironmentTypeEnum {
    badWeather = 'badWeather',
    blizzard = 'blizzard',
    blowingDust = 'blowingDust',
    blowingSnow = 'blowingSnow',
    crosswinds = 'crosswinds',
    damagingHail = 'damagingHail',
    denseFog = 'denseFog',
    eclipse = 'eclipse',
    extremeCold = 'extremeCold',
    extremeHeat = 'extremeHeat',
    fog = 'fog',
    freezingFog = 'freezingFog',
    frost = 'frost',
    gales = 'gales',
    gustyWinds = 'gustyWinds',
    hail = 'hail',
    heavyFrost = 'heavyFrost',
    heavyRain = 'heavyRain',
    heavySnowfall = 'heavySnowfall',
    hurricaneForceWinds = 'hurricaneForceWinds',
    lowSunGlare = 'lowSunGlare',
    moderateFog = 'moderateFog',
    ozonePollution = 'ozonePollution',
    pollution = 'pollution',
    patchyFog = 'patchyFog',
    precipitationInTheArea = 'precipitationInTheArea',
    rain = 'rain',
    rainChangingToSnow = 'rainChangingToSnow',
    sandStorms = 'sandStorms',
    severeExhaustPollution = 'severeExhaustPollution',
    severeSmog = 'severeSmog',
    showers = 'showers',
    sleet = 'sleet',
    smogAlert = 'smogAlert',
    smokeHazard = 'smokeHazard',
    snowChangingToRain = 'snowChangingToRain',
    snowfall = 'snowfall',
    sprayHazard = 'sprayHazard',
    stormForceWinds = 'stormForceWinds',
    strongGustsOfWind = 'strongGustsOfWind',
    strongWinds = 'strongWinds',
    swarmsOfInsects = 'swarmsOfInsects',
    temperatureFalling = 'temperatureFalling',
    thunderstorms = 'thunderstorms',
    tornadoes = 'tornadoes',
    veryStrongGustsOfWind = 'veryStrongGustsOfWind',
    visibilityReduced = 'visibilityReduced',
    whiteOut = 'whiteOut',
    winterStorm = 'winterStorm',
}

// PositionAbsoluteEnum ...
export enum PositionAbsoluteEnum {
    onLeft = 'onLeft',
    onRight = 'onRight',
    atTop = 'atTop',
    atBottom = 'atBottom',
}

// PositionRelativeEnum ...
export enum PositionRelativeEnum {
    above = 'above',
    below = 'below',
    toTheLeft = 'toTheLeft',
    toTheRight = 'toTheRight',
}

// PrecipitationDetail ...
export class PrecipitationDetail {
    PrecipitationType: string
    PrecipitationIntensity: PrecipitationIntensityValue
    DepositionDepth: FloatingPointMetreDistanceValue
    PrecipitationDetailExtension: _ExtensionType
}

// PrecipitationInformation ...
export class PrecipitationInformation extends WeatherData {
    NoPrecipitation: boolean
    PrecipitationDetail: PrecipitationDetail
    PrecipitationInformationExtension: _ExtensionType
}

// PrecipitationIntensityValue ...
export class PrecipitationIntensityValue extends DataValue {
    MillimetresPerHourIntensity: number
    PrecipitationIntensityValueExtension: _ExtensionType
}

// PrecipitationTypeEnum ...
export enum PrecipitationTypeEnum {
    drizzle = 'drizzle',
    freezingRain = 'freezingRain',
    hail = 'hail',
    rain = 'rain',
    sleet = 'sleet',
    snow = 'snow',
}

// PredefinedItinerary ...
export class PredefinedItinerary extends PredefinedLocationContainer {
    IdAttr: string
    VersionAttr: string
    PredefinedItineraryName: MultilingualString
    PredefinedLocation: Array<_PredefinedItineraryIndexPredefinedLocation>
    PredefinedItineraryExtension: _ExtensionType
}

// PredefinedLocation ...
export class PredefinedLocation extends PredefinedLocationContainer {
    IdAttr: string
    VersionAttr: string
    PredefinedLocationName: MultilingualString
    Location: Location
    PredefinedLocationExtension: _ExtensionType
}

// PredefinedLocationContainer ...
export class PredefinedLocationContainer {
    PredefinedLocationContainerExtension: _ExtensionType
}

// PredefinedLocationsPublication ...
export class PredefinedLocationsPublication extends PayloadPublication {
    HeaderInformation: HeaderInformation
    PredefinedLocationContainer: Array<PredefinedLocationContainer>
    PredefinedLocationsPublicationExtension: _ExtensionType
}

// PredefinedNonOrderedLocationGroup ...
export class PredefinedNonOrderedLocationGroup extends PredefinedLocationContainer {
    IdAttr: string
    VersionAttr: string
    PredefinedNonOrderedLocationGroupName: MultilingualString
    PredefinedLocation: Array<PredefinedLocation>
    PredefinedNonOrderedLocationGroupExtension: _ExtensionType
}

// ProbabilityOfOccurrenceEnum ...
export enum ProbabilityOfOccurrenceEnum {
    certain = 'certain',
    probable = 'probable',
    riskOf = 'riskOf',
}

// PublicEvent ...
export class PublicEvent extends Activity {
    PublicEventType: string
    PublicEventExtension: _ExtensionType
}

// PublicEventType2Enum ...
export enum PublicEventType2Enum {
    openAirConcert = 'openAirConcert',
    soundAndLightShow = 'soundAndLightShow',
    artEvent = 'artEvent',
    flowerEvent = 'flowerEvent',
    beerFestival = 'beerFestival',
    foodFestival = 'foodFestival',
    wineFestival = 'wineFestival',
    theatricalEvent = 'theatricalEvent',
    fireworkDisplay = 'fireworkDisplay',
    streetFestival = 'streetFestival',
    filmFestival = 'filmFestival',
    unknown = 'unknown',
    other = 'other',
}

// PublicEventTypeEnum ...
export enum PublicEventTypeEnum {
    agriculturalShow = 'agriculturalShow',
    airShow = 'airShow',
    athleticsMeeting = 'athleticsMeeting',
    commercialEvent = 'commercialEvent',
    culturalEvent = 'culturalEvent',
    ballGame = 'ballGame',
    baseballGame = 'baseballGame',
    basketballGame = 'basketballGame',
    bicycleRace = 'bicycleRace',
    boatRace = 'boatRace',
    boatShow = 'boatShow',
    boxingTournament = 'boxingTournament',
    bullFight = 'bullFight',
    ceremonialEvent = 'ceremonialEvent',
    concert = 'concert',
    cricketMatch = 'cricketMatch',
    exhibition = 'exhibition',
    fair = 'fair',
    festival = 'festival',
    filmTVMaking = 'filmTVMaking',
    footballMatch = 'footballMatch',
    funfair = 'funfair',
    gardeningOrFlowerShow = 'gardeningOrFlowerShow',
    golfTournament = 'golfTournament',
    hockeyGame = 'hockeyGame',
    horseRaceMeeting = 'horseRaceMeeting',
    internationalSportsMeeting = 'internationalSportsMeeting',
    majorEvent = 'majorEvent',
    marathon = 'marathon',
    market = 'market',
    match = 'match',
    motorShow = 'motorShow',
    motorSportRaceMeeting = 'motorSportRaceMeeting',
    parade = 'parade',
    procession = 'procession',
    raceMeeting = 'raceMeeting',
    rugbyMatch = 'rugbyMatch',
    severalMajorEvents = 'severalMajorEvents',
    show = 'show',
    showJumping = 'showJumping',
    sportsMeeting = 'sportsMeeting',
    stateOccasion = 'stateOccasion',
    tennisTournament = 'tennisTournament',
    tournament = 'tournament',
    tradeFair = 'tradeFair',
    waterSportsMeeting = 'waterSportsMeeting',
    winterSportsMeeting = 'winterSportsMeeting',
    other = 'other',
}

// PublicHoliday ...
export class PublicHoliday {
    Country: string
    CountrySubdivision: string
    Region: MultilingualString
    PublicHolidayType: string
    PublicHolidayName: MultilingualString
    PublicHolidayExtension: _ExtensionType
}

// PublicHolidayTypeEnum ...
export enum PublicHolidayTypeEnum {
    betweenChristmasAndNewYear = 'betweenChristmasAndNewYear',
    boxingDay = 'boxingDay',
    bridgeHoliday = 'bridgeHoliday',
    christmasEve = 'christmasEve',
    christmasDayAndBoxingDay = 'christmasDayAndBoxingDay',
    christmasHolidayPeriod = 'christmasHolidayPeriod',
    dayFollowingPublicHoliday = 'dayFollowingPublicHoliday',
    easterFridayHoliday = 'easterFridayHoliday',
    easterHolidayPeriod = 'easterHolidayPeriod',
    easterMondayHoliday = 'easterMondayHoliday',
    easterSaturday = 'easterSaturday',
    easterSunday = 'easterSunday',
    eveOfPublicHoliday = 'eveOfPublicHoliday',
    holidayPeriod = 'holidayPeriod',
    inLieuOfPublicHoliday = 'inLieuOfPublicHoliday',
    january2ndHoliday = 'january2ndHoliday',
    newYearsDay = 'newYearsDay',
    newYearsEve = 'newYearsEve',
    notPublicHoliday = 'notPublicHoliday',
    publicHoliday = 'publicHoliday',
    other = 'other',
}

// Reference ...
export class Reference {
    IdAttr: string
}

// ReferenceSettings ...
export class ReferenceSettings {
    PredefinedNonOrderedLocationGroupReference: _PredefinedNonOrderedLocationGroupVersionedReference
    TrafficStatusDefault: string
    ReferenceSettingsExtension: _ExtensionType
}

// Referent ...
export class Referent {
    ReferentIdentifier: string
    ReferentName: string
    ReferentType: string
    ReferentDescription: MultilingualString
    PointCoordinates: PointCoordinates
    ReferentExtension: _ExtensionType
}

// ReferentTypeEnum ...
export enum ReferentTypeEnum {
    boundary = 'boundary',
    intersection = 'intersection',
    referenceMarker = 'referenceMarker',
    landmark = 'landmark',
    roadNode = 'roadNode',
}

// RegulationEnum ...
export enum RegulationEnum {
    permitted = 'permitted',
    prohibited = 'prohibited',
    punishable = 'punishable',
    seasonalHeterogeneous = 'seasonalHeterogeneous',
    permittedOnlyAtParticularTimes = 'permittedOnlyAtParticularTimes',
    permittedOnlyOnParticularAreas = 'permittedOnlyOnParticularAreas',
    prohibitedAtParticularTimes = 'prohibitedAtParticularTimes',
    prohibitedOnParticularAreas = 'prohibitedOnParticularAreas',
    onlyOnRequest = 'onlyOnRequest',
    heterogeneous = 'heterogeneous',
    onlyOutsideBuildings = 'onlyOutsideBuildings',
    onlyInsideBuildings = 'onlyInsideBuildings',
    unspecified = 'unspecified',
    unknown = 'unknown',
    other = 'other',
}

// RelativeTrafficFlowEnum ...
export enum RelativeTrafficFlowEnum {
    trafficVeryMuchHeavierThanNormal = 'trafficVeryMuchHeavierThanNormal',
    trafficHeavierThanNormal = 'trafficHeavierThanNormal',
    trafficFlowNormal = 'trafficFlowNormal',
    trafficLighterThanNormal = 'trafficLighterThanNormal',
    trafficVeryMuchLighterThanNormal = 'trafficVeryMuchLighterThanNormal',
}

// RequestTypeEnum ...
export enum RequestTypeEnum {
    catalogue = 'catalogue',
    filter = 'filter',
    requestData = 'requestData',
    requestHistoricalData = 'requestHistoricalData',
    subscription = 'subscription',
}

// ReroutingManagement ...
export class ReroutingManagement extends NetworkManagement {
    ReroutingManagementType: string
    ReroutingItineraryDescription: MultilingualString
    SignedRerouting: boolean
    Entry: string
    Exit: string
    RoadOrJunctionNumber: string
    AlternativeRoute: Array<Itinerary>
    ReroutingManagementExtension: _ExtensionType
}

// ReroutingManagementTypeEnum ...
export enum ReroutingManagementTypeEnum {
    doNotFollowDiversionSigns = 'doNotFollowDiversionSigns',
    doNotUseEntry = 'doNotUseEntry',
    doNotUseExit = 'doNotUseExit',
    doNotUseIntersectionOrJunction = 'doNotUseIntersectionOrJunction',
    followDiversionSigns = 'followDiversionSigns',
    followLocalDiversion = 'followLocalDiversion',
    followSpecialMarkers = 'followSpecialMarkers',
    useEntry = 'useEntry',
    useExit = 'useExit',
    useIntersectionOrJunction = 'useIntersectionOrJunction',
}

// ReservationTypeEnum ...
export enum ReservationTypeEnum {
    optional = 'optional',
    mandatory = 'mandatory',
    notAvailable = 'notAvailable',
    partly = 'partly',
    unknown = 'unknown',
    unspecified = 'unspecified',
}

// ResponseEnum ...
export enum ResponseEnum {
    acknowledge = 'acknowledge',
    catalogueRequestDenied = 'catalogueRequestDenied',
    filterRequestDenied = 'filterRequestDenied',
    requestDenied = 'requestDenied',
    subscriptionRequestDenied = 'subscriptionRequestDenied',
}

// RestAreaActivityEnum ...
export enum RestAreaActivityEnum {
    openFire = 'openFire',
    overnightParking = 'overnightParking',
    picnic = 'picnic',
    smoking = 'smoking',
    camping = 'camping',
    handlingHazardousMaterial = 'handlingHazardousMaterial',
    barbecue = 'barbecue',
    other = 'other',
}

// RGBColour ...
export class RGBColour {
    RgbRedValue: number
    RgbGreenValue: number
    RgbBlueValue: number
    ColourName: MultilingualString
    RgbColourExtension: _ExtensionType
}

// Road ...
export class Road {
    NameOfRoad: MultilingualString
    RoadIdentifier: MultilingualString
    TypeOfRoad: string
    RoadDestination: Array<MultilingualString>
    RoadOrigination: Array<MultilingualString>
    DistanceToThisRoad: number
    RoadExtension: _ExtensionType
}

// RoadConditions ...
export class RoadConditions extends Conditions {
    RoadConditionsExtension: _ExtensionType
}

// RoadMaintenanceTypeEnum ...
export enum RoadMaintenanceTypeEnum {
    clearanceWork = 'clearanceWork',
    controlledAvalanche = 'controlledAvalanche',
    installationWork = 'installationWork',
    grassCuttingWork = 'grassCuttingWork',
    litterClearance = 'litterClearance',
    maintenanceWork = 'maintenanceWork',
    overheadWorks = 'overheadWorks',
    repairWork = 'repairWork',
    resurfacingWork = 'resurfacingWork',
    roadMarkingWork = 'roadMarkingWork',
    roadsideWork = 'roadsideWork',
    roadworksClearance = 'roadworksClearance',
    roadworks = 'roadworks',
    rockFallPreventativeMaintenance = 'rockFallPreventativeMaintenance',
    saltingInProgress = 'saltingInProgress',
    snowploughsInUse = 'snowploughsInUse',
    sweepingOfRoad = 'sweepingOfRoad',
    treeAndVegetationCuttingWork = 'treeAndVegetationCuttingWork',
    other = 'other',
}

// RoadNode ...
export class RoadNode extends Road {
    JunctionName: MultilingualString
    RoadNodeExtension: _ExtensionType
}

// RoadOperatorServiceDisruption ...
export class RoadOperatorServiceDisruption extends NonRoadEventInformation {
    RoadOperatorServiceDisruptionType: string
    RoadOperatorServiceDisruptionExtension: _ExtensionType
}

// RoadOperatorServiceDisruptionTypeEnum ...
export enum RoadOperatorServiceDisruptionTypeEnum {
    emergencyTelephoneNumberOutOfService = 'emergencyTelephoneNumberOutOfService',
    informationServiceTelephoneNumberOutOfService = 'informationServiceTelephoneNumberOutOfService',
    noTrafficOfficerPatrolService = 'noTrafficOfficerPatrolService',
}

// RoadOrCarriagewayOrLaneManagement ...
export class RoadOrCarriagewayOrLaneManagement extends NetworkManagement {
    RoadOrCarriagewayOrLaneManagementType: string
    MinimumCarOccupancy: number
    RoadOrCarriagewayOrLaneManagementExtension: _ExtensionType
}

// RoadOrCarriagewayOrLaneManagementTypeEnum ...
export enum RoadOrCarriagewayOrLaneManagementTypeEnum {
    carPoolLaneInOperation = 'carPoolLaneInOperation',
    carriagewayClosures = 'carriagewayClosures',
    clearALaneForEmergencyVehicles = 'clearALaneForEmergencyVehicles',
    clearALaneForSnowploughsAndGrittingVehicles = 'clearALaneForSnowploughsAndGrittingVehicles',
    closedPermanentlyForTheWinter = 'closedPermanentlyForTheWinter',
    contraflow = 'contraflow',
    doNotUseSpecifiedLanesOrCarriageways = 'doNotUseSpecifiedLanesOrCarriageways',
    hardShoulderRunningInOperation = 'hardShoulderRunningInOperation',
    heightRestrictionInOperation = 'heightRestrictionInOperation',
    intermittentShortTermClosures = 'intermittentShortTermClosures',
    keepToTheLeft = 'keepToTheLeft',
    keepToTheRight = 'keepToTheRight',
    laneClosures = 'laneClosures',
    lanesDeviated = 'lanesDeviated',
    narrowLanes = 'narrowLanes',
    newRoadworksLayout = 'newRoadworksLayout',
    overnightClosures = 'overnightClosures',
    roadCleared = 'roadCleared',
    roadClosed = 'roadClosed',
    rollingRoadBlock = 'rollingRoadBlock',
    rushHourLaneInOperation = 'rushHourLaneInOperation',
    singleAlternateLineTraffic = 'singleAlternateLineTraffic',
    tidalFlowLaneInOperation = 'tidalFlowLaneInOperation',
    turnAroundInOperation = 'turnAroundInOperation',
    useOfSpecifiedLanesOrCarriagewaysAllowed = 'useOfSpecifiedLanesOrCarriagewaysAllowed',
    useSpecifiedLanesOrCarriageways = 'useSpecifiedLanesOrCarriageways',
    vehicleStorageInOperation = 'vehicleStorageInOperation',
    weightRestrictionInOperation = 'weightRestrictionInOperation',
    other = 'other',
}

// RoadsideAssistance ...
export class RoadsideAssistance extends OperatorAction {
    RoadsideAssistanceType: string
    RoadsideAssistanceExtension: _ExtensionType
}

// RoadsideAssistanceTypeEnum ...
export enum RoadsideAssistanceTypeEnum {
    airAmbulance = 'airAmbulance',
    busPassengerAssistance = 'busPassengerAssistance',
    emergencyServices = 'emergencyServices',
    firstAid = 'firstAid',
    foodDelivery = 'foodDelivery',
    helicopterRescue = 'helicopterRescue',
    vehicleRepair = 'vehicleRepair',
    vehicleRecovery = 'vehicleRecovery',
    other = 'other',
}

// RoadsideServiceDisruption ...
export class RoadsideServiceDisruption extends NonRoadEventInformation {
    RoadsideServiceDisruptionType: string
    RoadsideServiceDisruptionExtension: _ExtensionType
}

// RoadsideServiceDisruptionTypeEnum ...
export enum RoadsideServiceDisruptionTypeEnum {
    barClosed = 'barClosed',
    dieselShortage = 'dieselShortage',
    fuelShortage = 'fuelShortage',
    lpgShortage = 'lpgShortage',
    methaneShortage = 'methaneShortage',
    noDieselForHeavyVehicles = 'noDieselForHeavyVehicles',
    noDieselForLightVehicles = 'noDieselForLightVehicles',
    noPublicTelephones = 'noPublicTelephones',
    noToiletFacilities = 'noToiletFacilities',
    noVehicleRepairFacilities = 'noVehicleRepairFacilities',
    petrolShortage = 'petrolShortage',
    restAreaBusy = 'restAreaBusy',
    restAreaClosed = 'restAreaClosed',
    restAreaOvercrowdedDriveToAnotherRestArea = 'restAreaOvercrowdedDriveToAnotherRestArea',
    serviceAreaBusy = 'serviceAreaBusy',
    serviceAreaClosed = 'serviceAreaClosed',
    serviceAreaFuelStationClosed = 'serviceAreaFuelStationClosed',
    serviceAreaOvercrowdedDriveToAnotherServiceArea = 'serviceAreaOvercrowdedDriveToAnotherServiceArea',
    serviceAreaRestaurantClosed = 'serviceAreaRestaurantClosed',
    someCommercialServicesClosed = 'someCommercialServicesClosed',
    waterShortage = 'waterShortage',
}

// RoadSurfaceConditionInformation ...
export class RoadSurfaceConditionInformation extends WeatherData {
    WeatherRelatedRoadConditionType: string
    RoadSurfaceConditionMeasurements: RoadSurfaceConditionMeasurements
    RoadSurfaceConditionInformationExtension: _ExtensionType
}

// RoadSurfaceConditionMeasurements ...
export class RoadSurfaceConditionMeasurements {
    RoadSurfaceTemperature: TemperatureValue
    ProtectionTemperature: TemperatureValue
    DeIcingApplicationRate: ApplicationRateValue
    DeIcingConcentration: KilogramsConcentrationValue
    DepthOfSnow: FloatingPointMetreDistanceValue
    WaterFilmThickness: FloatingPointMetreDistanceValue
    RoadSurfaceConditionMeasurementsExtension: _ExtensionType
}

// RoadTypeEnum ...
export enum RoadTypeEnum {
    motorway = 'motorway',
    trunkRoad = 'trunkRoad',
    mainRoad = 'mainRoad',
    other = 'other',
}

// Roadworks ...
export class Roadworks extends OperatorAction {
    RoadworksDuration: string
    RoadworksScale: string
    UnderTraffic: boolean
    UrgentRoadworks: boolean
    Mobility: Mobility
    Subjects: Subjects
    MaintenanceVehicles: MaintenanceVehicles
    RoadworksExtension: _ExtensionType
}

// RoadworksDurationEnum ...
export enum RoadworksDurationEnum {
    longTerm = 'longTerm',
    mediumTerm = 'mediumTerm',
    shortTerm = 'shortTerm',
}

// RoadworksScaleEnum ...
export enum RoadworksScaleEnum {
    major = 'major',
    medium = 'medium',
    minor = 'minor',
}

// Seconds ...
export type Seconds = number

// ServiceFacility ...
export class ServiceFacility extends ParkingEquipmentOrServiceFacility {
    ServiceFacilityType: string
    NumberOfSubitems: number
    DistanceFromParkingSite: number
    ServiceFacilityExtension: _ExtensionType
}

// ServiceFacilityTypeEnum ...
export enum ServiceFacilityTypeEnum {
    hotel = 'hotel',
    motel = 'motel',
    overnightAccommodation = 'overnightAccommodation',
    shop = 'shop',
    kiosk = 'kiosk',
    foodShopping = 'foodShopping',
    cafe = 'cafe',
    restaurant = 'restaurant',
    restaurantSelfService = 'restaurantSelfService',
    motorwayRestaurant = 'motorwayRestaurant',
    motorwayRestaurantSmall = 'motorwayRestaurantSmall',
    sparePartsShopping = 'sparePartsShopping',
    petrolStation = 'petrolStation',
    vehicleMaintenance = 'vehicleMaintenance',
    tyreRepair = 'tyreRepair',
    truckRepair = 'truckRepair',
    truckWash = 'truckWash',
    carWash = 'carWash',
    pharmacy = 'pharmacy',
    medicalFacility = 'medicalFacility',
    police = 'police',
    touristInformation = 'touristInformation',
    bikeSharing = 'bikeSharing',
    docstop = 'docstop',
    laundry = 'laundry',
    leisureActivities = 'leisureActivities',
    unknown = 'unknown',
    other = 'other',
}

// SeverityEnum ...
export enum SeverityEnum {
    highest = 'highest',
    high = 'high',
    medium = 'medium',
    low = 'low',
    lowest = 'lowest',
    none = 'none',
    unknown = 'unknown',
}

// SignSetting ...
export class SignSetting extends OperatorAction {
    VmsSetting: VmsSetting
    SignSettingExtension: _ExtensionType
}

// SiteMeasurements ...
export class SiteMeasurements {
    MeasurementSiteReference: _MeasurementSiteRecordVersionedReference
    MeasurementTimeDefault: string
    MeasuredValue: Array<_SiteMeasurementsIndexMeasuredValue>
    SiteMeasurementsExtension: _ExtensionType
}

// Situation ...
export class Situation {
    IdAttr: string
    VersionAttr: string
    OverallSeverity: string
    RelatedSituation: Array<_SituationVersionedReference>
    SituationVersionTime: string
    HeaderInformation: HeaderInformation
    SituationRecord: Array<SituationRecord>
    SituationExtension: _ExtensionType
}

// SituationPublication ...
export class SituationPublication extends PayloadPublication {
    Situation: Array<Situation>
    SituationPublicationExtension: _ExtensionType
}

// SituationRecord ...
export class SituationRecord {
    IdAttr: string
    VersionAttr: string
    SituationRecordCreationReference: string
    SituationRecordCreationTime: string
    SituationRecordObservationTime: string
    SituationRecordVersionTime: string
    SituationRecordFirstSupplierVersionTime: string
    ConfidentialityOverride: string
    ProbabilityOfOccurrence: string
    Severity: string
    Source: Source
    Validity: Validity
    Impact: Impact
    Cause: Cause
    GeneralPublicComment: Array<Comment>
    NonGeneralPublicComment: Array<Comment>
    UrlLink: Array<UrlLink>
    GroupOfLocations: GroupOfLocations
    Management: Management
    SituationRecordExtension: _SituationRecordExtensionType
}

// SituationRecordExtendedApproved ...
export class SituationRecordExtendedApproved {
    SafetyRelatedMessage: boolean
}

// Source ...
export class Source {
    SourceCountry: string
    SourceIdentification: string
    SourceName: MultilingualString
    SourceType: string
    Reliable: boolean
    SourceExtension: _ExtensionType
}

// SourceTypeEnum ...
export enum SourceTypeEnum {
    automobileClubPatrol = 'automobileClubPatrol',
    cameraObservation = 'cameraObservation',
    freightVehicleOperator = 'freightVehicleOperator',
    inductionLoopMonitoringStation = 'inductionLoopMonitoringStation',
    infraredMonitoringStation = 'infraredMonitoringStation',
    microwaveMonitoringStation = 'microwaveMonitoringStation',
    mobileTelephoneCaller = 'mobileTelephoneCaller',
    nonPoliceEmergencyServicePatrol = 'nonPoliceEmergencyServicePatrol',
    otherInformation = 'otherInformation',
    otherOfficialVehicle = 'otherOfficialVehicle',
    policePatrol = 'policePatrol',
    privateBreakdownService = 'privateBreakdownService',
    publicAndPrivateUtilities = 'publicAndPrivateUtilities',
    registeredMotoristObserver = 'registeredMotoristObserver',
    roadAuthorities = 'roadAuthorities',
    roadOperatorPatrol = 'roadOperatorPatrol',
    roadsideTelephoneCaller = 'roadsideTelephoneCaller',
    spotterAircraft = 'spotterAircraft',
    trafficMonitoringStation = 'trafficMonitoringStation',
    transitOperator = 'transitOperator',
    vehicleProbeMeasurement = 'vehicleProbeMeasurement',
    videoProcessingMonitoringStation = 'videoProcessingMonitoringStation',
}

// SpecialDay ...
export class SpecialDay {
    IntersectWithApplicableDays: boolean
    SpecialDayType: string
    SpecialDayName: MultilingualString
    PublicHoliday: Array<PublicHoliday>
    SpecialDayExtension: _ExtensionType
}

// SpecialDayTypeEnum ...
export enum SpecialDayTypeEnum {
    bicycleRaceDay = 'bicycleRaceDay',
    bullFightDay = 'bullFightDay',
    carnivalDay = 'carnivalDay',
    exhibitionDay = 'exhibitionDay',
    festivalDay = 'festivalDay',
    gamesDay = 'gamesDay',
    horseRaceMeetingDay = 'horseRaceMeetingDay',
    huntMeetingDay = 'huntMeetingDay',
    marathonRaceDay = 'marathonRaceDay',
    marketDay = 'marketDay',
    motorSportRaceMeetingDay = 'motorSportRaceMeetingDay',
    nonWorkingDay = 'nonWorkingDay',
    raceMeetingDay = 'raceMeetingDay',
    regattaDay = 'regattaDay',
    showDay = 'showDay',
    sportsMeetingDay = 'sportsMeetingDay',
    workingDay = 'workingDay',
    schoolDay = 'schoolDay',
    electionDay = 'electionDay',
    publicHoliday = 'publicHoliday',
    holidays = 'holidays',
    undefinedDayType = 'undefinedDayType',
    unknown = 'unknown',
    other = 'other',
}

// SpecialLocationParkingSite ...
export class SpecialLocationParkingSite extends ParkingSite {
    ParkingSpecialLocation: string
    ParkingOtherSpecialLocation: MultilingualString
    SpecialLocationParkingSiteExtension: _ExtensionType
}

// SpeedManagement ...
export class SpeedManagement extends NetworkManagement {
    SpeedManagementType: string
    TemporarySpeedLimit: number
    SpeedManagementExtension: _ExtensionType
}

// SpeedManagementTypeEnum ...
export enum SpeedManagementTypeEnum {
    activeSpeedControlInOperation = 'activeSpeedControlInOperation',
    doNotSlowdownUnnecessarily = 'doNotSlowdownUnnecessarily',
    observeSpeedLimit = 'observeSpeedLimit',
    policeSpeedChecksInOperation = 'policeSpeedChecksInOperation',
    reduceYourSpeed = 'reduceYourSpeed',
    speedRestrictionInOperation = 'speedRestrictionInOperation',
    other = 'other',
}

// SpeedPercentile ...
export class SpeedPercentile {
    VehiclePercentage: PercentageValue
    SpeedPercentile: SpeedValue
    SpeedPercentileExtension: _ExtensionType
}

// SpeedValue ...
export class SpeedValue extends DataValue {
    Speed: number
    SpeedValueExtension: _ExtensionType
}

// SquareMetres ...
export type SquareMetres = number

// String ...
export type String = string

// Subjects ...
export class Subjects {
    SubjectTypeOfWorks: string
    NumberOfSubjects: number
    SubjectsExtension: _ExtensionType
}

// SubjectTypeOfWorksEnum ...
export enum SubjectTypeOfWorksEnum {
    bridge = 'bridge',
    buriedCables = 'buriedCables',
    buriedServices = 'buriedServices',
    crashBarrier = 'crashBarrier',
    gallery = 'gallery',
    gantry = 'gantry',
    gasMainWork = 'gasMainWork',
    interchange = 'interchange',
    junction = 'junction',
    levelCrossing = 'levelCrossing',
    lightingSystem = 'lightingSystem',
    measurementEquipment = 'measurementEquipment',
    noiseProtection = 'noiseProtection',
    road = 'road',
    roadsideDrains = 'roadsideDrains',
    roadsideEmbankment = 'roadsideEmbankment',
    roadsideEquipment = 'roadsideEquipment',
    roadSigns = 'roadSigns',
    roundabout = 'roundabout',
    tollGate = 'tollGate',
    tunnel = 'tunnel',
    waterMain = 'waterMain',
    other = 'other',
}

// Subscription ...
export class Subscription {
    DeleteSubscription: boolean
    DeliveryInterval: number
    OperatingMode: string
    SubscriptionStartTime: string
    SubscriptionState: string
    SubscriptionStopTime: string
    UpdateMethod: string
    Target: Array<Target>
    FilterReference: FilterReference
    CatalogueReference: CatalogueReference
    SubscriptionExtension: _ExtensionType
}

// SubscriptionStateEnum ...
export enum SubscriptionStateEnum {
    active = 'active',
    suspended = 'suspended',
}

// SupplementaryPositionalDescription ...
export class SupplementaryPositionalDescription {
    LocationPrecisionAttr: number | null
    LocationDescriptor: string
    SequentialRampNumber: number
    AffectedCarriagewayAndLanes: Array<AffectedCarriagewayAndLanes>
    SupplementaryPositionalDescriptionExtension: _ExtensionType
}

// Target ...
export class Target {
    Address: string
    Protocol: string
    TargetExtension: _ExtensionType
}

// TariffsAndPayment ...
export class TariffsAndPayment {
    LastUpdated: string
    AcceptedMeansOfPayment: string
    PaymentMode: string
    PaymentAdditionalDescription: MultilingualString
    FreeOfCharge: boolean
    ReservationFee: number
    UrlLinkAddress: string
    ChargeBand: Array<ChargeBand>
    ChargeBandByReference: Array<ChargeBandByReference>
    AcceptedPaymentCards: AcceptedPaymentCards
    TariffsAndPaymentExtension: _ExtensionType
}

// Temperature ...
export class Temperature {
    AirTemperature: TemperatureValue
    DewPointTemperature: TemperatureValue
    MaximumTemperature: TemperatureValue
    MinimumTemperature: TemperatureValue
    TemperatureExtension: _ExtensionType
}

// TemperatureCelsius ...
export type TemperatureCelsius = number

// TemperatureInformation ...
export class TemperatureInformation extends WeatherData {
    Temperature: Temperature
    TemperatureInformationExtension: _ExtensionType
}

// TemperatureValue ...
export class TemperatureValue extends DataValue {
    Temperature: number
    TemperatureValueExtension: _ExtensionType
}

// TextDisplayAreaSettings ...
export class TextDisplayAreaSettings {
    TextLanternsOn: boolean
    TextLuminanceOverride: boolean
    TextLuminanceLevel: number
    TextLuminanceLevelName: string
    TextDisplayAreaSettingsExtension: _ExtensionType
}

// Time ...
export type Time = string

// TimePeriodByHour ...
export class TimePeriodByHour extends TimePeriodOfDay {
    StartTimeOfPeriod: string
    EndTimeOfPeriod: string
    TimePeriodByHourExtension: _ExtensionType
}

// TimePeriodOfDay ...
export class TimePeriodOfDay {
    TimePeriodOfDayExtension: _ExtensionType
}

// TimePrecisionEnum ...
export enum TimePrecisionEnum {
    tenthsOfSecond = 'tenthsOfSecond',
    second = 'second',
    minute = 'minute',
    quarterHour = 'quarterHour',
    halfHour = 'halfHour',
    hour = 'hour',
}

// Tonnes ...
export type Tonnes = number

// TpegAreaDescriptor ...
export class TpegAreaDescriptor extends TpegDescriptor {
    TpegAreaDescriptorType: string
    TpegAreaDescriptorExtension: _ExtensionType
}

// TpegAreaLocation ...
export class TpegAreaLocation {
    TpegAreaLocationType: string
    TpegHeight: TpegHeight
    TpegAreaLocationExtension: _ExtensionType
}

// TpegDescriptor ...
export class TpegDescriptor {
    Descriptor: MultilingualString
    TpegDescriptorExtension: _ExtensionType
}

// TpegFramedPoint ...
export class TpegFramedPoint extends TpegPointLocation {
    TpegFramedPointLocationType: string
    FramedPoint: TpegNonJunctionPoint
    To: TpegPoint
    From: TpegPoint
    TpegFramedPointExtension: _ExtensionType
}

// TpegGeometricArea ...
export class TpegGeometricArea extends TpegAreaLocation {
    Radius: number
    CentrePoint: PointCoordinates
    Name: TpegAreaDescriptor
    TpegGeometricAreaExtension: _ExtensionType
}

// TpegHeight ...
export class TpegHeight {
    Height: number
    HeightType: string
    TpegHeightExtension: _ExtensionType
}

// TpegIlcPointDescriptor ...
export class TpegIlcPointDescriptor extends TpegPointDescriptor {
    TpegIlcPointDescriptorType: string
    TpegIlcPointDescriptorExtension: _ExtensionType
}

// TpegJunction ...
export class TpegJunction extends TpegPoint {
    PointCoordinates: PointCoordinates
    Name: TpegJunctionPointDescriptor
    Ilc: Array<TpegIlcPointDescriptor>
    OtherName: Array<TpegOtherPointDescriptor>
    TpegJunctionExtension: _ExtensionType
}

// TpegJunctionPointDescriptor ...
export class TpegJunctionPointDescriptor extends TpegPointDescriptor {
    TpegJunctionPointDescriptorType: string
    TpegJunctionPointDescriptorExtension: _ExtensionType
}

// TpegLinearLocation ...
export class TpegLinearLocation {
    TpegDirection: string
    TpegLinearLocationType: string
    To: TpegPoint
    From: TpegPoint
    TpegLinearLocationExtension: _ExtensionType
}

// TpegLoc01AreaLocationSubtypeEnum ...
export enum TpegLoc01AreaLocationSubtypeEnum {
    largeArea = 'largeArea',
    other = 'other',
}

// TpegLoc01FramedPointLocationSubtypeEnum ...
export enum TpegLoc01FramedPointLocationSubtypeEnum {
    framedPoint = 'framedPoint',
}

// TpegLoc01LinearLocationSubtypeEnum ...
export enum TpegLoc01LinearLocationSubtypeEnum {
    segment = 'segment',
}

// TpegLoc01SimplePointLocationSubtypeEnum ...
export enum TpegLoc01SimplePointLocationSubtypeEnum {
    intersection = 'intersection',
    nonLinkedPoint = 'nonLinkedPoint',
}

// TpegLoc03AreaDescriptorSubtypeEnum ...
export enum TpegLoc03AreaDescriptorSubtypeEnum {
    administrativeAreaName = 'administrativeAreaName',
    administrativeReferenceName = 'administrativeReferenceName',
    areaName = 'areaName',
    countyName = 'countyName',
    lakeName = 'lakeName',
    nationName = 'nationName',
    policeForceControlAreaName = 'policeForceControlAreaName',
    regionName = 'regionName',
    seaName = 'seaName',
    townName = 'townName',
    other = 'other',
}

// TpegLoc03IlcPointDescriptorSubtypeEnum ...
export enum TpegLoc03IlcPointDescriptorSubtypeEnum {
    tpegIlcName1 = 'tpegIlcName1',
    tpegIlcName2 = 'tpegIlcName2',
    tpegIlcName3 = 'tpegIlcName3',
}

// TpegLoc03JunctionPointDescriptorSubtypeEnum ...
export enum TpegLoc03JunctionPointDescriptorSubtypeEnum {
    junctionName = 'junctionName',
}

// TpegLoc03OtherPointDescriptorSubtypeEnum ...
export enum TpegLoc03OtherPointDescriptorSubtypeEnum {
    administrativeAreaName = 'administrativeAreaName',
    administrativeReferenceName = 'administrativeReferenceName',
    airportName = 'airportName',
    areaName = 'areaName',
    buildingName = 'buildingName',
    busStopIdentifier = 'busStopIdentifier',
    busStopName = 'busStopName',
    canalName = 'canalName',
    countyName = 'countyName',
    ferryPortName = 'ferryPortName',
    intersectionName = 'intersectionName',
    lakeName = 'lakeName',
    linkName = 'linkName',
    localLinkName = 'localLinkName',
    metroStationName = 'metroStationName',
    nationName = 'nationName',
    nonLinkedPointName = 'nonLinkedPointName',
    parkingFacilityName = 'parkingFacilityName',
    pointName = 'pointName',
    pointOfInterestName = 'pointOfInterestName',
    railwayStation = 'railwayStation',
    regionName = 'regionName',
    riverName = 'riverName',
    seaName = 'seaName',
    serviceAreaName = 'serviceAreaName',
    tidalRiverName = 'tidalRiverName',
    townName = 'townName',
    other = 'other',
}

// TpegLoc04HeightTypeEnum ...
export enum TpegLoc04HeightTypeEnum {
    above = 'above',
    aboveSeaLevel = 'aboveSeaLevel',
    aboveStreetLevel = 'aboveStreetLevel',
    at = 'at',
    atSeaLevel = 'atSeaLevel',
    atStreetLevel = 'atStreetLevel',
    below = 'below',
    belowSeaLevel = 'belowSeaLevel',
    belowStreetLevel = 'belowStreetLevel',
    undefined = 'undefined',
    unknown = 'unknown',
    other = 'other',
}

// TpegNamedOnlyArea ...
export class TpegNamedOnlyArea extends TpegAreaLocation {
    Name: Array<TpegAreaDescriptor>
    TpegNamedOnlyAreaExtension: _ExtensionType
}

// TpegNonJunctionPoint ...
export class TpegNonJunctionPoint extends TpegPoint {
    PointCoordinates: PointCoordinates
    Name: Array<TpegOtherPointDescriptor>
    TpegNonJunctionPointExtension: _ExtensionType
}

// TpegOtherPointDescriptor ...
export class TpegOtherPointDescriptor extends TpegPointDescriptor {
    TpegOtherPointDescriptorType: string
    TpegOtherPointDescriptorExtension: _ExtensionType
}

// TpegPoint ...
export class TpegPoint {
    TpegPointExtension: _ExtensionType
}

// TpegPointDescriptor ...
export class TpegPointDescriptor extends TpegDescriptor {
    TpegPointDescriptorExtension: _ExtensionType
}

// TpegPointLocation ...
export class TpegPointLocation {
    TpegDirection: string
    TpegPointLocationExtension: _ExtensionType
}

// TpegSimplePoint ...
export class TpegSimplePoint extends TpegPointLocation {
    TpegSimplePointLocationType: string
    Point: TpegPoint
    TpegSimplePointExtension: _ExtensionType
}

// TrafficConcentration ...
export class TrafficConcentration extends TrafficData {
    Concentration: ConcentrationOfVehiclesValue
    Occupancy: PercentageValue
    TrafficConcentrationExtension: _ExtensionType
}

// TrafficConstrictionTypeEnum ...
export enum TrafficConstrictionTypeEnum {
    carriagewayBlocked = 'carriagewayBlocked',
    carriagewayPartiallyObstructed = 'carriagewayPartiallyObstructed',
    lanesBlocked = 'lanesBlocked',
    lanesPartiallyObstructed = 'lanesPartiallyObstructed',
    roadBlocked = 'roadBlocked',
    roadPartiallyObstructed = 'roadPartiallyObstructed',
}

// TrafficData ...
export class TrafficData extends BasicData {
    ForVehiclesWithCharacteristicsOf: VehicleCharacteristics
    TrafficDataExtension: _ExtensionType
}

// TrafficElement ...
export class TrafficElement extends SituationRecord {
    TrafficElementExtension: _ExtensionType
}

// TrafficFlow ...
export class TrafficFlow extends TrafficData {
    AxleFlow: AxleFlowValue
    PcuFlow: PcuFlowValue
    PercentageLongVehicles: PercentageValue
    VehicleFlow: VehicleFlowValue
    TrafficFlowExtension: _ExtensionType
}

// TrafficFlowCharacteristicsEnum ...
export enum TrafficFlowCharacteristicsEnum {
    erraticFlow = 'erraticFlow',
    smoothFlow = 'smoothFlow',
    stopAndGo = 'stopAndGo',
    trafficBlocked = 'trafficBlocked',
}

// TrafficHeadway ...
export class TrafficHeadway extends TrafficData {
    AverageDistanceHeadway: FloatingPointMetreDistanceValue
    AverageTimeHeadway: DurationValue
    TrafficHeadwayExtension: _ExtensionType
}

// TrafficSpeed ...
export class TrafficSpeed extends TrafficData {
    AverageVehicleSpeed: SpeedValue
    SpeedPercentile: SpeedPercentile
    TrafficSpeedExtension: _ExtensionType
}

// TrafficStatus ...
export class TrafficStatus extends BasicData {
    TrafficTrendType: string
    TrafficStatus: TrafficStatusValue
    TrafficStatusExtension: _ExtensionType
}

// TrafficStatusEnum ...
export enum TrafficStatusEnum {
    impossible = 'impossible',
    congested = 'congested',
    heavy = 'heavy',
    freeFlow = 'freeFlow',
    unknown = 'unknown',
}

// TrafficStatusValue ...
export class TrafficStatusValue extends DataValue {
    TrafficStatusValue: string
    TrafficStatusValueExtension: _ExtensionType
}

// TrafficTrendTypeEnum ...
export enum TrafficTrendTypeEnum {
    trafficBuildingUp = 'trafficBuildingUp',
    trafficEasing = 'trafficEasing',
    trafficStable = 'trafficStable',
    unknown = 'unknown',
}

// TrafficTypeEnum ...
export enum TrafficTypeEnum {
    accessOnlyTraffic = 'accessOnlyTraffic',
    destinedForAirport = 'destinedForAirport',
    destinedForAirportArrivals = 'destinedForAirportArrivals',
    destinedForAirportDepartures = 'destinedForAirportDepartures',
    destinedForFerryService = 'destinedForFerryService',
    destinedForRailService = 'destinedForRailService',
    holidayTraffic = 'holidayTraffic',
    localTraffic = 'localTraffic',
    longDistanceTraffic = 'longDistanceTraffic',
    regionalTraffic = 'regionalTraffic',
    residentsOnlyTraffic = 'residentsOnlyTraffic',
    throughTraffic = 'throughTraffic',
    visitorTraffic = 'visitorTraffic',
}

// TrafficView ...
export class TrafficView {
    IdAttr: string
    TrafficViewTime: string
    PredefinedNonOrderedLocationGroupReference: _PredefinedNonOrderedLocationGroupVersionedReference
    LinearTrafficView: Array<LinearTrafficView>
    TrafficViewExtension: _ExtensionType
}

// TrafficViewPublication ...
export class TrafficViewPublication extends PayloadPublication {
    HeaderInformation: HeaderInformation
    TrafficView: Array<TrafficView>
    TrafficViewPublicationExtension: _ExtensionType
}

// TrafficViewRecord ...
export class TrafficViewRecord {
    IdAttr: string
    RecordSequenceNumber: number
    TrafficElement: TrafficElement
    OperatorAction: OperatorAction
    ElaboratedData: ElaboratedData
    UrlLink: Array<UrlLink>
    TrafficViewRecordExtension: _ExtensionType
}

// TransitInformation ...
export class TransitInformation extends NonRoadEventInformation {
    JourneyDestination: MultilingualString
    JourneyOrigin: MultilingualString
    JourneyReference: string
    TransitServiceInformation: string
    TransitServiceType: string
    ScheduledDepartureTime: string
    TransitInformationExtension: _ExtensionType
}

// TransitServiceInformationEnum ...
export enum TransitServiceInformationEnum {
    cancellations = 'cancellations',
    delayDueToBadWeather = 'delayDueToBadWeather',
    delayDueToRepairs = 'delayDueToRepairs',
    delayedUntilFurtherNotice = 'delayedUntilFurtherNotice',
    delaysDueToFlotsam = 'delaysDueToFlotsam',
    departureOnSchedule = 'departureOnSchedule',
    ferryReplacedByIceRoad = 'ferryReplacedByIceRoad',
    freeShuttleServiceOperating = 'freeShuttleServiceOperating',
    informationServiceNotAvailable = 'informationServiceNotAvailable',
    irregularServiceDelays = 'irregularServiceDelays',
    loadCapacityChanged = 'loadCapacityChanged',
    restrictionsForLongerVehicles = 'restrictionsForLongerVehicles',
    serviceDelays = 'serviceDelays',
    serviceDelaysOfUncertainDuration = 'serviceDelaysOfUncertainDuration',
    serviceFullyBooked = 'serviceFullyBooked',
    serviceNotOperating = 'serviceNotOperating',
    serviceNotOperatingSubstituteServiceAvailable = 'serviceNotOperatingSubstituteServiceAvailable',
    serviceSuspended = 'serviceSuspended',
    serviceWithdrawn = 'serviceWithdrawn',
    shuttleServiceOperating = 'shuttleServiceOperating',
    temporaryChangesToTimetables = 'temporaryChangesToTimetables',
    other = 'other',
}

// TransitServiceTypeEnum ...
export enum TransitServiceTypeEnum {
    air = 'air',
    bus = 'bus',
    ferry = 'ferry',
    hydrofoil = 'hydrofoil',
    rail = 'rail',
    tram = 'tram',
    undergroundMetro = 'undergroundMetro',
}

// TravelTimeData ...
export class TravelTimeData extends BasicData {
    TravelTimeTrendType: string
    TravelTimeType: string
    VehicleType: string
    TravelTime: DurationValue
    FreeFlowTravelTime: DurationValue
    NormallyExpectedTravelTime: DurationValue
    FreeFlowSpeed: SpeedValue
    TravelTimeDataExtension: _ExtensionType
}

// TravelTimeTrendTypeEnum ...
export enum TravelTimeTrendTypeEnum {
    decreasing = 'decreasing',
    increasing = 'increasing',
    stable = 'stable',
}

// TravelTimeTypeEnum ...
export enum TravelTimeTypeEnum {
    best = 'best',
    estimated = 'estimated',
    instantaneous = 'instantaneous',
    reconstituted = 'reconstituted',
}

// TruckParkingDynamicManagementEnum ...
export enum TruckParkingDynamicManagementEnum {
    compactParking = 'compactParking',
    queueParking = 'queueParking',
    noDynamicParkingManagement = 'noDynamicParkingManagement',
    other = 'other',
}

// UpdateMethodEnum ...
export enum UpdateMethodEnum {
    allElementUpdate = 'allElementUpdate',
    singleElementUpdate = 'singleElementUpdate',
    snapshot = 'snapshot',
}

// UrbanParkingSite ...
export class UrbanParkingSite extends ParkingSite {
    UrbanParkingSiteType: string
    ParkingZone: MultilingualString
    UrbanParkingSiteExtension: _ExtensionType
}

// UrbanParkingSiteTypeEnum ...
export enum UrbanParkingSiteTypeEnum {
    onStreetParking = 'onStreetParking',
    offStreetParking = 'offStreetParking',
    other = 'other',
}

// UrgencyEnum ...
export enum UrgencyEnum {
    extremelyUrgent = 'extremelyUrgent',
    urgent = 'urgent',
    normalUrgency = 'normalUrgency',
}

// Url ...
export type Url = string

// UrlLink ...
export class UrlLink {
    UrlLinkAddress: string
    UrlLinkDescription: MultilingualString
    UrlLinkType: string
    UrlLinkExtension: _ExtensionType
}

// UrlLinkTypeEnum ...
export enum UrlLinkTypeEnum {
    documentPdf = 'documentPdf',
    html = 'html',
    image = 'image',
    rss = 'rss',
    videoStream = 'videoStream',
    voiceStream = 'voiceStream',
    other = 'other',
}

// UsedPaymentCard ...
export class UsedPaymentCard {
    PaymentCard: string
    OtherPaymentCard: string
    PaymentCardBrand: string
    OtherPaymentCardBrand: string
    UsedPaymentCardExtension: _ExtensionType
}

// UserTypeEnum ...
export enum UserTypeEnum {
    allUsers = 'allUsers',
    shoppers = 'shoppers',
    hotelGuests = 'hotelGuests',
    subscribers = 'subscribers',
    reservationHolders = 'reservationHolders',
    seasonTicketHolders = 'seasonTicketHolders',
    registeredDisabledUsers = 'registeredDisabledUsers',
    disabled = 'disabled',
    handicapped = 'handicapped',
    hearingImpaired = 'hearingImpaired',
    visuallyImpaired = 'visuallyImpaired',
    wheelchairUsers = 'wheelchairUsers',
    elderlyUsers = 'elderlyUsers',
    families = 'families',
    men = 'men',
    women = 'women',
    pregnantWomen = 'pregnantWomen',
    pensioners = 'pensioners',
    students = 'students',
    staff = 'staff',
    employees = 'employees',
    customers = 'customers',
    visitors = 'visitors',
    members = 'members',
    shortTermParker = 'shortTermParker',
    longTermParker = 'longTermParker',
    overnightParker = 'overnightParker',
    sportEventAwaySupporters = 'sportEventAwaySupporters',
    sportEventHomeSupporters = 'sportEventHomeSupporters',
    residents = 'residents',
    commuters = 'commuters',
    parkAndRideUsers = 'parkAndRideUsers',
    parkAndWalkUser = 'parkAndWalkUser',
    parkAndCycleUser = 'parkAndCycleUser',
    other = 'other',
    unknown = 'unknown',
}

// Validity ...
export class Validity {
    ValidityStatus: string
    Overrunning: boolean
    ValidityTimeSpecification: OverallPeriod
    ValidityExtension: _ExtensionType
}

// ValidityStatusEnum ...
export enum ValidityStatusEnum {
    active = 'active',
    suspended = 'suspended',
    definedByValidityTimeSpec = 'definedByValidityTimeSpec',
}

// Vehicle ...
export class Vehicle {
    VehicleColour: MultilingualString
    VehicleCountryOfOrigin: MultilingualString
    VehicleIdentifier: string
    VehicleManufacturer: string
    VehicleModel: string
    VehicleRegistrationPlateIdentifier: string
    VehicleStatus: string
    VehicleCharacteristics: VehicleCharacteristics
    AxleSpacingOnVehicle: Array<AxleSpacing>
    SpecificAxleWeight: Array<AxleWeight>
    HazardousGoodsAssociatedWithVehicle: HazardousMaterials
    VehicleExtension: _ExtensionType
}

// VehicleCharacteristics ...
export class VehicleCharacteristics {
    FuelType: string
    LoadType: string
    VehicleEquipment: string
    VehicleType: string
    VehicleUsage: string
    GrossWeightCharacteristic: Array<GrossWeightCharacteristic>
    HeightCharacteristic: Array<HeightCharacteristic>
    LengthCharacteristic: Array<LengthCharacteristic>
    WidthCharacteristic: Array<WidthCharacteristic>
    HeaviestAxleWeightCharacteristic: Array<HeaviestAxleWeightCharacteristic>
    NumberOfAxlesCharacteristic: Array<NumberOfAxlesCharacteristic>
    VehicleCharacteristicsExtension: _VehicleCharacteristicsExtensionType
}

// VehicleCharacteristicsExtended ...
export class VehicleCharacteristicsExtended {
    EmissionClassification: string
    OperationFreeOfEmission: boolean
    LoadType2: string
    VehicleType2: string
    FuelType2: string
    VehicleUsage2: string
}

// VehicleCountAndRate ...
export class VehicleCountAndRate {
    MeasurementSiteReference: _MeasurementSiteRecordVersionedReference
    MeasuredValueIndex: number
    DedicatedAccess: _ParkingAccessReference
    MeasurementTimeDefault: string
    LastCalibration: string
    CoveringPetrolStationArea: boolean
    VehicleCountWithinInterval: Array<VehicleCountWithinInterval>
    VehicleRate: Array<VehicleRate>
    VehicleCountAndRateExtension: _ExtensionType
}

// VehicleCountValue ...
export class VehicleCountValue extends DataValue {
    VehicleCount: number
    VehicleCountValueExtension: _ExtensionType
}

// VehicleCountWithinInterval ...
export class VehicleCountWithinInterval {
    MeasurementOrCalcualtionTime: string
    MeasurementInterval: number
    NumberOfIncomingVehicles: VehicleCountValue
    NumberOfOutgoingVehicles: VehicleCountValue
    ChangeOfOccupiedSpaces: OccupancyChangeValue
    CountedVehicles: VehicleCharacteristics
    VehicleCountWithinIntervalExtension: _ExtensionType
}

// VehicleEquipmentEnum ...
export enum VehicleEquipmentEnum {
    notUsingSnowChains = 'notUsingSnowChains',
    notUsingSnowChainsOrTyres = 'notUsingSnowChainsOrTyres',
    snowChainsInUse = 'snowChainsInUse',
    snowTyresInUse = 'snowTyresInUse',
    snowChainsOrTyresInUse = 'snowChainsOrTyresInUse',
    withoutSnowTyresOrChainsOnBoard = 'withoutSnowTyresOrChainsOnBoard',
}

// VehicleFlowValue ...
export class VehicleFlowValue extends DataValue {
    VehicleFlowRate: number
    VehicleFlowValueExtension: _ExtensionType
}

// VehicleObstruction ...
export class VehicleObstruction extends Obstruction {
    VehicleObstructionType: string
    ObstructingVehicle: Array<Vehicle>
    VehicleObstructionExtension: _ExtensionType
}

// VehicleObstructionTypeEnum ...
export enum VehicleObstructionTypeEnum {
    abandonedVehicle = 'abandonedVehicle',
    abnormalLoad = 'abnormalLoad',
    brokenDownBus = 'brokenDownBus',
    brokenDownHeavyLorry = 'brokenDownHeavyLorry',
    brokenDownVehicle = 'brokenDownVehicle',
    convoy = 'convoy',
    damagedVehicle = 'damagedVehicle',
    dangerousSlowMovingVehicle = 'dangerousSlowMovingVehicle',
    emergencyVehicle = 'emergencyVehicle',
    highSpeedEmergencyVehicle = 'highSpeedEmergencyVehicle',
    longLoad = 'longLoad',
    militaryConvoy = 'militaryConvoy',
    overheightVehicle = 'overheightVehicle',
    prohibitedVehicleOnTheRoadway = 'prohibitedVehicleOnTheRoadway',
    saltingOrGrittingVehicleInUse = 'saltingOrGrittingVehicleInUse',
    slowMovingMaintenanceVehicle = 'slowMovingMaintenanceVehicle',
    slowVehicle = 'slowVehicle',
    snowplough = 'snowplough',
    trackLayingVehicle = 'trackLayingVehicle',
    unlitVehicleOnTheRoad = 'unlitVehicleOnTheRoad',
    vehicleOnFire = 'vehicleOnFire',
    vehicleCarryingHazardousMaterials = 'vehicleCarryingHazardousMaterials',
    vehicleInDifficulty = 'vehicleInDifficulty',
    vehicleOnWrongCarriageway = 'vehicleOnWrongCarriageway',
    vehicleStuck = 'vehicleStuck',
    vehicleStuckUnderBridge = 'vehicleStuckUnderBridge',
    vehicleWithOverheightLoad = 'vehicleWithOverheightLoad',
    vehicleWithOverwideLoad = 'vehicleWithOverwideLoad',
    other = 'other',
}

// VehicleRate ...
export class VehicleRate {
    MeasurementOrCalculationTime: string
    FillRate: VehicleFlowValue
    ExitRate: VehicleFlowValue
    VehicleFlowRate: VehicleFlowValue
    MeasuredVehicles: VehicleCharacteristics
    VehicleRateExtension: _ExtensionType
}

// VehiclesPerHour ...
export type VehiclesPerHour = number

// VehicleStatusEnum ...
export enum VehicleStatusEnum {
    abandoned = 'abandoned',
    brokenDown = 'brokenDown',
    burntOut = 'burntOut',
    damaged = 'damaged',
    damagedAndImmobilized = 'damagedAndImmobilized',
    onFire = 'onFire',
}

// VehicleType2Enum ...
export enum VehicleType2Enum {
    motorhome = 'motorhome',
    lightGoodsVehicle = 'lightGoodsVehicle',
    heavyGoodsVehicle = 'heavyGoodsVehicle',
    minibus = 'minibus',
    smallCar = 'smallCar',
    largeCar = 'largeCar',
    lightGoodsVehicleWithTrailer = 'lightGoodsVehicleWithTrailer',
    heavyGoodsVehicleWithTrailer = 'heavyGoodsVehicleWithTrailer',
    heavyHaulageVehicle = 'heavyHaulageVehicle',
    passengerCar = 'passengerCar',
    unknown = 'unknown',
}

// VehicleTypeEnum ...
export enum VehicleTypeEnum {
    agriculturalVehicle = 'agriculturalVehicle',
    anyVehicle = 'anyVehicle',
    articulatedVehicle = 'articulatedVehicle',
    bicycle = 'bicycle',
    bus = 'bus',
    car = 'car',
    caravan = 'caravan',
    carOrLightVehicle = 'carOrLightVehicle',
    carWithCaravan = 'carWithCaravan',
    carWithTrailer = 'carWithTrailer',
    constructionOrMaintenanceVehicle = 'constructionOrMaintenanceVehicle',
    fourWheelDrive = 'fourWheelDrive',
    highSidedVehicle = 'highSidedVehicle',
    lorry = 'lorry',
    moped = 'moped',
    motorcycle = 'motorcycle',
    motorcycleWithSideCar = 'motorcycleWithSideCar',
    motorscooter = 'motorscooter',
    tanker = 'tanker',
    threeWheeledVehicle = 'threeWheeledVehicle',
    trailer = 'trailer',
    tram = 'tram',
    twoWheeledVehicle = 'twoWheeledVehicle',
    van = 'van',
    vehicleWithCatalyticConverter = 'vehicleWithCatalyticConverter',
    vehicleWithoutCatalyticConverter = 'vehicleWithoutCatalyticConverter',
    vehicleWithCaravan = 'vehicleWithCaravan',
    vehicleWithTrailer = 'vehicleWithTrailer',
    withEvenNumberedRegistrationPlates = 'withEvenNumberedRegistrationPlates',
    withOddNumberedRegistrationPlates = 'withOddNumberedRegistrationPlates',
    other = 'other',
}

// VehicleUsage2Enum ...
export enum VehicleUsage2Enum {
    cityLogistics = 'cityLogistics',
    carSharing = 'carSharing',
}

// VehicleUsageEnum ...
export enum VehicleUsageEnum {
    agricultural = 'agricultural',
    commercial = 'commercial',
    emergencyServices = 'emergencyServices',
    military = 'military',
    nonCommercial = 'nonCommercial',
    patrol = 'patrol',
    recoveryServices = 'recoveryServices',
    roadMaintenanceOrConstruction = 'roadMaintenanceOrConstruction',
    roadOperator = 'roadOperator',
    taxi = 'taxi',
}

// VersionedReference ...
export class VersionedReference {
    IdAttr: string
    VersionAttr: string
}

// Visibility ...
export class Visibility {
    MinimumVisibilityDistance: IntegerMetreDistanceValue
    VisibilityExtension: _ExtensionType
}

// VisibilityInformation ...
export class VisibilityInformation extends WeatherData {
    Visibility: Visibility
    VisibilityInformationExtension: _ExtensionType
}

// Vms ...
export class Vms {
    VmsWorking: boolean
    VmsMessageSequencingInterval: number
    VmsMessage: Array<_VmsMessageIndexVmsMessage>
    TextDisplayAreaSettings: TextDisplayAreaSettings
    PictogramDisplayAreaSettings: Array<_VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings>
    VmsLocationOverride: Location
    ManagedLogicalLocationOverride: VmsManagedLogicalLocation
    VmsDynamicCharacteristics: VmsDynamicCharacteristics
    VmsFault: Array<VmsFault>
    VmsExtension: _ExtensionType
}

// VmsDatexPictogramEnum ...
export enum VmsDatexPictogramEnum {
    accident = 'accident',
    advisorySpeed = 'advisorySpeed',
    animalsOnRoad = 'animalsOnRoad',
    blankVoid = 'blankVoid',
    bridgeClosed = 'bridgeClosed',
    bridgeSwingInOperation = 'bridgeSwingInOperation',
    carParkFull = 'carParkFull',
    carParkSpacesAvailable = 'carParkSpacesAvailable',
    carriagewayNarrows = 'carriagewayNarrows',
    carriagewayNarrowsOnTheLeft = 'carriagewayNarrowsOnTheLeft',
    carriagewayNarrowsOnTheRight = 'carriagewayNarrowsOnTheRight',
    carriagewayReducedToOneLane = 'carriagewayReducedToOneLane',
    carriagewayReducedToTwoLanes = 'carriagewayReducedToTwoLanes',
    carriagewayReducedToThreeLanes = 'carriagewayReducedToThreeLanes',
    chainsOrSnowTyresRecommended = 'chainsOrSnowTyresRecommended',
    compulsoryMinimumSpeed = 'compulsoryMinimumSpeed',
    crossWind = 'crossWind',
    dangerOfFire = 'dangerOfFire',
    drivingOfVehiclesLessThanXMetresApartProhibited = 'drivingOfVehiclesLessThanXMetresApartProhibited',
    endOfAdvisorySpeed = 'endOfAdvisorySpeed',
    endOfCompulsoryMinimumSpeed = 'endOfCompulsoryMinimumSpeed',
    endOfProhibitionOfOvertaking = 'endOfProhibitionOfOvertaking',
    endOfProhibitionOfOvertakingForGoodsVehicles = 'endOfProhibitionOfOvertakingForGoodsVehicles',
    endOfSpeedLimit = 'endOfSpeedLimit',
    exitClosed = 'exitClosed',
    fallingRocks = 'fallingRocks',
    fastenChildrensSeatBelts = 'fastenChildrensSeatBelts',
    fastenYourSeatBelt = 'fastenYourSeatBelt',
    fire = 'fire',
    floodingOrFlashFloods = 'floodingOrFlashFloods',
    fog = 'fog',
    footballMatch = 'footballMatch',
    hardShoulderNotRunning = 'hardShoulderNotRunning',
    hardShoulderRunning = 'hardShoulderRunning',
    keepASafeDistance = 'keepASafeDistance',
    keepLeft = 'keepLeft',
    keepRight = 'keepRight',
    lane1ClosedOf2 = 'lane1ClosedOf2',
    lane2ClosedOf2 = 'lane2ClosedOf2',
    lane1ClosedOf3 = 'lane1ClosedOf3',
    lane3ClosedOf3 = 'lane3ClosedOf3',
    lanes1And2ClosedOf3 = 'lanes1And2ClosedOf3',
    lanes2And3ClosedOf3 = 'lanes2And3ClosedOf3',
    lane1ClosedOf4 = 'lane1ClosedOf4',
    lane4ClosedOf4 = 'lane4ClosedOf4',
    lanes1And2ClosedOf4 = 'lanes1And2ClosedOf4',
    lanes3And4ClosedOf4 = 'lanes3And4ClosedOf4',
    lanes1And2And3ClosedOf4 = 'lanes1And2And3ClosedOf4',
    lanes2And3And4ClosedOf4 = 'lanes2And3And4ClosedOf4',
    laneClosed = 'laneClosed',
    laneDeviationToLeft = 'laneDeviationToLeft',
    laneDeviationToRight = 'laneDeviationToRight',
    laneOpen = 'laneOpen',
    leftHandLaneClosed = 'leftHandLaneClosed',
    lightSignals = 'lightSignals',
    looseGravel = 'looseGravel',
    maintenanceVehicleInAction = 'maintenanceVehicleInAction',
    maximumSpeedLimitedToTheFigureIndicated = 'maximumSpeedLimitedToTheFigureIndicated',
    narrowLanesAead = 'narrowLanesAead',
    noEntry = 'noEntry',
    noEntryForAnyPowerDrivenVehicleDrawingATrailer = 'noEntryForAnyPowerDrivenVehicleDrawingATrailer',
    noEntryForAnyPowerDrivenVehicleDrawingATrailerOtherThanASemiTrailerOrASingleAxleTrailer = 'noEntryForAnyPowerDrivenVehicleDrawingATrailerOtherThanASemiTrailerOrASingleAxleTrailer',
    noEntryForGoodsVehicles = 'noEntryForGoodsVehicles',
    noEntryForVehiclesExceedingXTonnesLadenMass = 'noEntryForVehiclesExceedingXTonnesLadenMass',
    noEntryForVehiclesHavingAMassExceedingXTonnesOnOneAxle = 'noEntryForVehiclesHavingAMassExceedingXTonnesOnOneAxle',
    noEntryForVehiclesHavingAnOverallHeightExceedingXMetres = 'noEntryForVehiclesHavingAnOverallHeightExceedingXMetres',
    noEntryForVehiclesHavingAnOverallLengthExceedingXMetres = 'noEntryForVehiclesHavingAnOverallLengthExceedingXMetres',
    noEntryForVehiclesHavingAnOverallWidthExceedingXMetres = 'noEntryForVehiclesHavingAnOverallWidthExceedingXMetres',
    noEntryForVehiclesCarryingDangerousGoods = 'noEntryForVehiclesCarryingDangerousGoods',
    otherDangers = 'otherDangers',
    overtakingByGoodsVehiclesProhibited = 'overtakingByGoodsVehiclesProhibited',
    overtakingProhibited = 'overtakingProhibited',
    pollutionOrSmogAlert = 'pollutionOrSmogAlert',
    queue = 'queue',
    rain = 'rain',
    rightHandLaneClosed = 'rightHandLaneClosed',
    roadClosedAhead = 'roadClosedAhead',
    roadworks = 'roadworks',
    slipperyRoad = 'slipperyRoad',
    smoke = 'smoke',
    snow = 'snow',
    snowChainsCompulsory = 'snowChainsCompulsory',
    snowTyresCompulsory = 'snowTyresCompulsory',
    snowPloughInAction = 'snowPloughInAction',
    speedCamerasInAction = 'speedCamerasInAction',
    trafficCongestion = 'trafficCongestion',
    trafficDeviatedToOppositeCarriagewayAhead = 'trafficDeviatedToOppositeCarriagewayAhead',
    trafficPartiallyDeviatedToOppositeCarriagewayAhead = 'trafficPartiallyDeviatedToOppositeCarriagewayAhead',
    tunnelClosed = 'tunnelClosed',
    turnLeft = 'turnLeft',
    turnRight = 'turnRight',
    twoWayTraffic = 'twoWayTraffic',
    unevenRoad = 'unevenRoad',
    vehicleFire = 'vehicleFire',
    other = 'other',
}

// VmsDatexSupplementalPictogramEnum ...
export enum VmsDatexSupplementalPictogramEnum {
    distanceToTheBeginningofTheApplicationZone = 'distanceToTheBeginningofTheApplicationZone',
    exceptAnyPowerDrivenVehicleDrawingTrailer = 'exceptAnyPowerDrivenVehicleDrawingTrailer',
    exceptBus = 'exceptBus',
    exceptGoodsVehicles = 'exceptGoodsVehicles',
    exceptSemiTrailer = 'exceptSemiTrailer',
    exceptVehiclesCarryingDangerousGoods = 'exceptVehiclesCarryingDangerousGoods',
    inCaseOfIceOrSnow = 'inCaseOfIceOrSnow',
    lengthOfTheApplicationZone = 'lengthOfTheApplicationZone',
    restrictedToAnyPowerDrivenVehicleDrawingTrailer = 'restrictedToAnyPowerDrivenVehicleDrawingTrailer',
    restricetdToBus = 'restricetdToBus',
    restrictedToGoodsVehicles = 'restrictedToGoodsVehicles',
    restrictedToSemiTrailer = 'restrictedToSemiTrailer',
    restrictedToVehiclesCarryingDangerousGoods = 'restrictedToVehiclesCarryingDangerousGoods',
    maintenanceVehicles = 'maintenanceVehicles',
    snowPloughs = 'snowPloughs',
    other = 'other',
}

// VmsDynamicCharacteristics ...
export class VmsDynamicCharacteristics {
    NumberOfPictogramDisplayAreas: number
    VmsTextDisplayCharacteristics: VmsTextDisplayCharacteristics
    VmsPictogramDisplayCharacteristics: Array<_VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics>
    VmsDynamicCharacteristicsExtension: _ExtensionType
}

// VmsFault ...
export class VmsFault extends Fault {
    VmsFault: string
    VmsFaultExtension: _ExtensionType
}

// VmsFaultEnum ...
export enum VmsFaultEnum {
    communicationsFailure = 'communicationsFailure',
    incorrectMessageDisplayed = 'incorrectMessageDisplayed',
    incorrectPictogramDisplayed = 'incorrectPictogramDisplayed',
    outOfService = 'outOfService',
    powerFailure = 'powerFailure',
    unableToClearDown = 'unableToClearDown',
    unknown = 'unknown',
    other = 'other',
}

// VmsLuminanceLevelEnum ...
export enum VmsLuminanceLevelEnum {
    switchedOff = 'switchedOff',
    testing = 'testing',
    night = 'night',
    overcast = 'overcast',
    broadDaylight = 'broadDaylight',
    sunInEyes = 'sunInEyes',
    sunOnBack = 'sunOnBack',
    foggyDay = 'foggyDay',
    foggyNight = 'foggyNight',
}

// VmsManagedLogicalLocation ...
export class VmsManagedLogicalLocation {
    ManagedLogicalLocation: MultilingualString
    DistanceFromLogicalLocation: number
    ManagedLocation: Location
    VmsManagedLogicalLocationExtension: _ExtensionType
}

// VmsMessage ...
export class VmsMessage {
    AssociatedManagementOrDiversionPlan: string
    MessageSetBy: MultilingualString
    SetBySystem: boolean
    ReasonForSetting: MultilingualString
    CodedReasonForSetting: string
    VmsMessageInformationType: string
    PrimarySetting: boolean
    MareNostrumCompliant: boolean
    TimeLastSet: string
    RequestedBy: MultilingualString
    SituationToWhichMessageIsRelated: VersionedReference
    SituationRecordToWhichMessageIsRelated: VersionedReference
    DistanceFromSituationRecord: number
    TextPictogramSequencingInterval: number
    TextPage: Array<_TextPage>
    VmsPictogramDisplayArea: Array<_VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea>
    VmsMessageExtension: _ExtensionType
}

// VmsMessageInformationTypeEnum ...
export enum VmsMessageInformationTypeEnum {
    campaignMessage = 'campaignMessage',
    dateTime = 'dateTime',
    futureInformation = 'futureInformation',
    instructionOrMessage = 'instructionOrMessage',
    situationWarning = 'situationWarning',
    temperature = 'temperature',
    trafficManagement = 'trafficManagement',
    travelTime = 'travelTime',
}

// VmsPictogram ...
export class VmsPictogram {
    PictogramDescription: string
    PictogramCode: string
    PictogramUrl: string
    AdditionalPictogramDescription: MultilingualString
    PictogramFlashing: boolean
    PictogramInInverseColour: boolean
    PresenceOfRedTriangle: boolean
    ViennaConventionCompliant: boolean
    DistanceAttribute: number
    HeightAttribute: number
    LengthAttribute: number
    SpeedAttribute: number
    WeightAttribute: number
    WeightPerAxleAttribute: number
    WidthAttribute: number
    VmsSupplementaryPanel: VmsSupplementaryPanel
    VmsPictogramExtension: _ExtensionType
}

// VmsPictogramDisplayArea ...
export class VmsPictogramDisplayArea {
    SynchronizedSequencingWithTextPages: boolean
    VmsPictogram: Array<_VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram>
    VmsPictogramDisplayAreaExtension: _ExtensionType
}

// VmsPictogramDisplayCharacteristics ...
export class VmsPictogramDisplayCharacteristics {
    PictogramLanternsPresent: boolean
    PictogramSequencingCapable: boolean
    PictogramPixelsAcross: number
    PictogramPixelsDown: number
    PictogramDisplayHeight: number
    PictogramDisplayWidth: number
    PictogramCodeListIdentifier: string
    MaxPictogramLuminanceLevel: number
    PictogramNumberOfColours: number
    MaxNumberOfSequentialPictograms: number
    PictogramPositionAbsolute: string
    PictogramPositionX: number
    PictogramPositionY: number
    PictogramPositionRelativeToText: string
    VmsSupplementaryPanelCharacteristics: VmsSupplementaryPanelCharacteristics
    VmsPictogramDisplayCharacteristicsExtension: _ExtensionType
}

// VmsPublication ...
export class VmsPublication extends PayloadPublication {
    HeaderInformation: HeaderInformation
    VmsUnit: Array<VmsUnit>
    VmsPublicationExtension: _ExtensionType
}

// VmsRecord ...
export class VmsRecord {
    VmsDescription: MultilingualString
    VmsOwner: MultilingualString
    VmsPhysicalMounting: string
    VmsType: string
    VmsTypeCode: string
    NumberOfPictogramDisplayAreas: number
    DynamicallyConfigurableDisplayAreas: boolean
    VmsDisplayHeight: number
    VmsDisplayWidth: number
    VmsHeightAboveRoadway: number
    VmsTextDisplayCharacteristics: VmsTextDisplayCharacteristics
    VmsPictogramDisplayCharacteristics: Array<_VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics>
    VmsLocation: Location
    VmsManagedLogicalLocation: VmsManagedLogicalLocation
    BackgroundImageUrl: UrlLink
    VmsRecordExtension: _ExtensionType
}

// VmsSetting ...
export class VmsSetting {
    VmsSettingExtension: _ExtensionType
}

// VmsSupplementaryPanel ...
export class VmsSupplementaryPanel {
    SupplementaryMessageDescription: MultilingualString
    VmsSupplementaryPictogram: VmsSupplementaryPictogram
    VmsSupplementaryText: VmsTextLine
    VmsSupplementaryPanelExtension: _ExtensionType
}

// VmsSupplementaryPanelCharacteristics ...
export class VmsSupplementaryPanelCharacteristics {
    SupplementaryPictogramCodeListIdentifier: string
    SupplementaryPanelPixelsAcross: number
    SupplementaryPanelPixelsDown: number
    SupplementaryPanelDisplayHeight: number
    SupplementaryPanelDisplayWidth: number
    SupplementaryPanelPositionX: number
    SupplementaryPanelPositionY: number
    RelativePositionToPictogramArea: string
    VmsSupplementaryPanelCharacteristicsExtension: _ExtensionType
}

// VmsSupplementaryPictogram ...
export class VmsSupplementaryPictogram {
    SupplementaryPictogramDescription: string
    SupplementaryPictogramCode: string
    SupplementaryPictogramUrl: string
    AdditionalSupplementaryPictogramDescription: MultilingualString
    PictogramFlashing: boolean
    VmsSupplementaryPictogramExtension: _ExtensionType
}

// VmsTablePublication ...
export class VmsTablePublication extends PayloadPublication {
    HeaderInformation: HeaderInformation
    VmsUnitTable: Array<VmsUnitTable>
    VmsTablePublicationExtension: _ExtensionType
}

// VmsText ...
export class VmsText {
    VmsLegendCode: string
    VmsTextImageUrl: string
    VmsTextLine: Array<_VmsTextLineIndexVmsTextLine>
    VmsTextExtension: _ExtensionType
}

// VmsTextDisplayCharacteristics ...
export class VmsTextDisplayCharacteristics {
    TextLanternsPresent: boolean
    TextPageSequencingCapable: boolean
    TextPixelsAcross: number
    TextPixelsDown: number
    TextDisplayHeight: number
    TextDisplayWidth: number
    MaxNumberOfCharacters: number
    MaxNumberOfRows: number
    LegendCodeListIdentifier: string
    MaxFontHeight: number
    MinFontHeight: number
    MaxFontWidth: number
    MinFontWidth: number
    MaxFontSpacing: number
    MinFontSpacing: number
    MaxTextLuminanceLevel: number
    MaxNumberOfSequentialPages: number
    TextPositionAbsolute: string
    TextPositionX: number
    TextPositionY: number
    VmsTextDisplayCharacteristicsExtension: _ExtensionType
}

// VmsTextLine ...
export class VmsTextLine {
    VmsTextLine: string
    VmsTextLineLanguage: string
    VmsTextLineColour: string
    VmsTextLineFlashing: boolean
    VmsTextLineHtml: string
    VmsTextLineExtension: _ExtensionType
}

// VmsTypeEnum ...
export enum VmsTypeEnum {
    colourGraphic = 'colourGraphic',
    continuousSign = 'continuousSign',
    monochromeGraphic = 'monochromeGraphic',
    matrixSign = 'matrixSign',
    other = 'other',
}

// VmsUnit ...
export class VmsUnit extends VmsSetting {
    VmsUnitTableReference: _VmsUnitTableVersionedReference
    VmsUnitReference: _VmsUnitRecordVersionedReference
    Vms: Array<_VmsUnitVmsIndexVms>
    VmsUnitFault: Array<VmsUnitFault>
    VmsUnitExtension: _ExtensionType
}

// VmsUnitFault ...
export class VmsUnitFault extends Fault {
    VmsUnitFault: string
    VmsUnitFaultExtension: _ExtensionType
}

// VmsUnitRecord ...
export class VmsUnitRecord {
    IdAttr: string
    VersionAttr: string
    NumberOfVms: number
    VmsUnitIdentifier: string
    VmsUnitIPAddress: string
    VmsUnitElectronicAddress: string
    VmsRecord: Array<_VmsUnitRecordVmsIndexVmsRecord>
    VmsUnitRecordExtension: _ExtensionType
}

// VmsUnitTable ...
export class VmsUnitTable {
    IdAttr: string
    VersionAttr: string
    VmsUnitTableIdentification: string
    VmsUnitRecord: Array<VmsUnitRecord>
    VmsUnitTableExtension: _ExtensionType
}

// Volt ...
export type Volt = number

// WeatherData ...
export class WeatherData extends BasicData {
    WeatherDataExtension: _ExtensionType
}

// WeatherRelatedRoadConditions ...
export class WeatherRelatedRoadConditions extends RoadConditions {
    WeatherRelatedRoadConditionType: string
    RoadSurfaceConditionMeasurements: RoadSurfaceConditionMeasurements
    WeatherRelatedRoadConditionsExtension: _ExtensionType
}

// WeatherRelatedRoadConditionTypeEnum ...
export enum WeatherRelatedRoadConditionTypeEnum {
    blackIce = 'blackIce',
    deepSnow = 'deepSnow',
    dry = 'dry',
    freezingOfWetRoads = 'freezingOfWetRoads',
    freezingPavements = 'freezingPavements',
    freezingRain = 'freezingRain',
    freshSnow = 'freshSnow',
    ice = 'ice',
    iceBuildUp = 'iceBuildUp',
    iceWithWheelBarTracks = 'iceWithWheelBarTracks',
    icyPatches = 'icyPatches',
    looseSnow = 'looseSnow',
    normalWinterConditionsForPedestrians = 'normalWinterConditionsForPedestrians',
    packedSnow = 'packedSnow',
    roadSurfaceMelting = 'roadSurfaceMelting',
    slipperyRoad = 'slipperyRoad',
    slushOnRoad = 'slushOnRoad',
    slushStrings = 'slushStrings',
    snowDrifts = 'snowDrifts',
    snowOnPavement = 'snowOnPavement',
    snowOnTheRoad = 'snowOnTheRoad',
    surfaceWater = 'surfaceWater',
    wet = 'wet',
    wetAndIcyRoad = 'wetAndIcyRoad',
    wetIcyPavement = 'wetIcyPavement',
    other = 'other',
}

// WeekOfMonthEnum ...
export enum WeekOfMonthEnum {
    firstWeekOfMonth = 'firstWeekOfMonth',
    secondWeekOfMonth = 'secondWeekOfMonth',
    thirdWeekOfMonth = 'thirdWeekOfMonth',
    fourthWeekOfMonth = 'fourthWeekOfMonth',
    fifthWeekOfMonth = 'fifthWeekOfMonth',
}

// WidthCharacteristic ...
export class WidthCharacteristic {
    ComparisonOperator: string
    VehicleWidth: number
    WidthCharacteristicExtension: _ExtensionType
}

// Wind ...
export class Wind {
    WindMeasurementHeight: number
    WindSpeed: SpeedValue
    MaximumWindSpeed: SpeedValue
    WindDirectionBearing: DirectionBearingValue
    WindDirectionCompass: DirectionCompassValue
    WindExtension: _ExtensionType
}

// WindInformation ...
export class WindInformation extends WeatherData {
    Wind: Wind
    WindInformationExtension: _ExtensionType
}

// WinterDrivingManagement ...
export class WinterDrivingManagement extends NetworkManagement {
    WinterEquipmentManagementType: string
    WinterDrivingManagementExtension: _ExtensionType
}

// WinterEquipmentManagementTypeEnum ...
export enum WinterEquipmentManagementTypeEnum {
    doNoUseStudTyres = 'doNoUseStudTyres',
    useSnowChains = 'useSnowChains',
    useSnowChainsOrTyres = 'useSnowChainsOrTyres',
    useSnowTyres = 'useSnowTyres',
    winterEquipmentOnBoardRequired = 'winterEquipmentOnBoardRequired',
    other = 'other',
}
